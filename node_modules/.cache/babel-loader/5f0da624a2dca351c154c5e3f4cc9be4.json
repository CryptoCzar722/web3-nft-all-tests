{"ast":null,"code":"import _slicedToArray from \"/Users/andrew/Documents/Work/SIBM-Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useState } from 'react';\nimport { useEthers } from '../hooks';\nimport { useConfig } from './config';\nimport { JsonRpcProvider } from '@ethersproject/providers';\nimport { useInjectedNetwork } from './injectedNetwork';\nexport function NetworkActivator(_ref) {\n  var providerOverride = _ref.providerOverride;\n\n  var _useEthers = useEthers(),\n      activate = _useEthers.activate,\n      activateBrowserWallet = _useEthers.activateBrowserWallet,\n      connectedChainId = _useEthers.chainId;\n\n  var _useConfig = useConfig(),\n      readOnlyChainId = _useConfig.readOnlyChainId,\n      readOnlyUrls = _useConfig.readOnlyUrls,\n      autoConnect = _useConfig.autoConnect,\n      pollingInterval = _useConfig.pollingInterval;\n\n  var injectedProvider = useInjectedNetwork();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      readonlyConnected = _useState2[0],\n      setReadonlyConnected = _useState2[1];\n\n  useEffect(function () {\n    if (providerOverride) {\n      activate(providerOverride);\n    }\n  }, [providerOverride]);\n  useEffect(function () {\n    if (readOnlyChainId && readOnlyUrls && !providerOverride) {\n      if (readOnlyUrls[readOnlyChainId] && connectedChainId !== readOnlyChainId) {\n        var provider = new JsonRpcProvider(readOnlyUrls[readOnlyChainId]);\n        provider.pollingInterval = pollingInterval;\n        activate(provider).then(function () {\n          return setReadonlyConnected(true);\n        });\n      }\n    }\n  }, [readOnlyChainId, readOnlyUrls]);\n  useEffect(function () {\n    autoConnect && injectedProvider && !providerOverride && readonlyConnected && activateBrowserWallet();\n  }, [readonlyConnected]);\n  return null;\n}","map":null,"metadata":{},"sourceType":"module"}