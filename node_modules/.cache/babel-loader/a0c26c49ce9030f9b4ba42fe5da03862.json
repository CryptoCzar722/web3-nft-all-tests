{"ast":null,"code":"Object.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar React = require('react');\n\nvar PropTypes = require('prop-types');\n\nvar ProgressBar = function ProgressBar(_a) {\n  var bgColor = _a.bgColor,\n      completed = _a.completed,\n      baseBgColor = _a.baseBgColor,\n      height = _a.height,\n      width = _a.width,\n      margin = _a.margin,\n      padding = _a.padding,\n      borderRadius = _a.borderRadius,\n      labelAlignment = _a.labelAlignment,\n      labelColor = _a.labelColor,\n      labelSize = _a.labelSize,\n      isLabelVisible = _a.isLabelVisible,\n      transitionDuration = _a.transitionDuration,\n      transitionTimingFunction = _a.transitionTimingFunction,\n      className = _a.className,\n      dir = _a.dir,\n      ariaValuemin = _a.ariaValuemin,\n      ariaValuemax = _a.ariaValuemax,\n      ariaValuetext = _a.ariaValuetext,\n      maxCompleted = _a.maxCompleted,\n      customLabel = _a.customLabel,\n      animateOnRender = _a.animateOnRender,\n      barContainerClassName = _a.barContainerClassName,\n      completedClassName = _a.completedClassName,\n      labelClassName = _a.labelClassName;\n\n  var getAlignment = function getAlignment(alignmentOption) {\n    if (alignmentOption === \"left\") {\n      return \"flex-start\";\n    } else if (alignmentOption === \"center\") {\n      return \"center\";\n    } else if (alignmentOption === \"right\") {\n      return \"flex-end\";\n    } else {\n      return null;\n    }\n  };\n\n  var alignment = getAlignment(labelAlignment);\n\n  var getFillerWidth = function getFillerWidth(maxCompletedValue, completedValue) {\n    if (maxCompletedValue) {\n      var ratio = Number(completedValue) / maxCompletedValue;\n      return ratio > 1 ? \"100%\" : ratio * 100 + \"%\";\n    }\n\n    return 0;\n  };\n\n  var fillerWidth = getFillerWidth(maxCompleted, completed);\n\n  var _b = React.useState(0),\n      initWidth = _b[0],\n      setInitWidth = _b[1];\n\n  var containerStyles = {\n    height: height,\n    backgroundColor: baseBgColor,\n    borderRadius: borderRadius,\n    padding: padding,\n    width: width,\n    margin: margin\n  };\n  var fillerStyles = {\n    height: height,\n    width: animateOnRender ? initWidth : fillerWidth,\n    backgroundColor: bgColor,\n    transition: \"width \" + (transitionDuration || \"1s\") + \" \" + (transitionTimingFunction || \"ease-in-out\"),\n    borderRadius: \"inherit\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: labelAlignment !== \"outside\" && alignment ? alignment : \"normal\"\n  };\n  var labelStyles = {\n    padding: labelAlignment === \"outside\" ? \"0 0 0 5px\" : \"5px\",\n    color: labelColor,\n    fontWeight: \"bold\",\n    fontSize: labelSize,\n    display: !isLabelVisible ? \"none\" : \"initial\"\n  };\n  var outsideStyles = {\n    display: labelAlignment === \"outside\" ? \"flex\" : \"initial\",\n    alignItems: labelAlignment === \"outside\" ? \"center\" : \"initial\"\n  };\n  var completedStr = typeof completed === \"number\" ? completed + \"%\" : \"\" + completed;\n  var labelStr = customLabel ? customLabel : completedStr;\n  React.useEffect(function () {\n    if (animateOnRender) {\n      requestAnimationFrame(function () {\n        return setInitWidth(fillerWidth);\n      });\n    }\n  }, [fillerWidth, animateOnRender]);\n  return React.createElement(\"div\", {\n    style: className ? undefined : outsideStyles,\n    className: className,\n    dir: dir,\n    role: \"progressbar\",\n    \"aria-valuenow\": parseFloat(labelStr),\n    \"aria-valuemin\": ariaValuemin,\n    \"aria-valuemax\": ariaValuemax,\n    \"aria-valuetext\": \"\" + (ariaValuetext === null ? labelStr : ariaValuetext)\n  }, React.createElement(\"div\", {\n    style: barContainerClassName ? undefined : containerStyles,\n    className: barContainerClassName\n  }, React.createElement(\"div\", {\n    style: completedClassName ? undefined : fillerStyles,\n    className: completedClassName\n  }, labelAlignment !== \"outside\" && React.createElement(\"span\", {\n    style: labelClassName ? undefined : labelStyles,\n    className: labelClassName\n  }, labelStr))), labelAlignment === \"outside\" && React.createElement(\"span\", {\n    style: labelClassName ? undefined : labelStyles,\n    className: labelClassName\n  }, labelStr));\n};\n\nProgressBar.propTypes = {\n  completed: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  bgColor: PropTypes.string,\n  baseBgColor: PropTypes.string,\n  height: PropTypes.string,\n  width: PropTypes.string,\n  borderRadius: PropTypes.string,\n  margin: PropTypes.string,\n  padding: PropTypes.string,\n  labelAlignment: PropTypes.oneOf([\"left\", \"center\", \"right\", \"outside\"]),\n  labelColor: PropTypes.string,\n  labelSize: PropTypes.string,\n  isLabelVisible: PropTypes.bool,\n  className: PropTypes.string,\n  dir: PropTypes.oneOf([\"rtl\", \"ltr\", \"auto\"]),\n  maxCompleted: PropTypes.number,\n  customLabel: PropTypes.string,\n  animateOnRender: PropTypes.bool,\n  barContainerClassName: PropTypes.string,\n  completedClassName: PropTypes.string,\n  labelClassName: PropTypes.string\n};\nProgressBar.defaultProps = {\n  bgColor: \"#6a1b9a\",\n  height: \"20px\",\n  width: \"100%\",\n  borderRadius: \"50px\",\n  labelAlignment: \"right\",\n  baseBgColor: \"#e0e0de\",\n  labelColor: \"#fff\",\n  labelSize: \"15px\",\n  isLabelVisible: true,\n  dir: \"ltr\",\n  ariaValuemin: 0,\n  ariaValuemax: 100,\n  ariaValuetext: null,\n  maxCompleted: 100,\n  animateOnRender: false\n};\nexports.default = ProgressBar;","map":null,"metadata":{},"sourceType":"script"}