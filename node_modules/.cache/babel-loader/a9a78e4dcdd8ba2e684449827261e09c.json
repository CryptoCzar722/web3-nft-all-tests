{"ast":null,"code":"import _regeneratorRuntime from \"/Users/andrew/Documents/Work/SIBM-Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/Users/andrew/Documents/Work/SIBM-Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"/Users/andrew/Documents/Work/SIBM-Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Contract } from '@ethersproject/contracts';\nvar ABI = ['function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) public view returns (tuple(bool requireSuccess, bytes returnData)[])'];\nexport function multicall2(_x, _x2, _x3, _x4) {\n  return _multicall.apply(this, arguments);\n}\n\nfunction _multicall() {\n  _multicall = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(provider, address, blockNumber, requests) {\n    var _a, contract, results, state, i, _requests$i, _address, data, _results$i, result, stateForAddress;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(requests.length === 0)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {});\n\n          case 2:\n            contract = new Contract(address, ABI, provider);\n            _context.next = 5;\n            return contract.tryAggregate(false, requests.map(function (_ref) {\n              var address = _ref.address,\n                  data = _ref.data;\n              return [address, data];\n            }), {\n              blockTag: blockNumber\n            });\n\n          case 5:\n            results = _context.sent;\n            state = {};\n\n            for (i = 0; i < requests.length; i++) {\n              _requests$i = requests[i], _address = _requests$i.address, data = _requests$i.data;\n              _results$i = _slicedToArray(results[i], 2), result = _results$i[1];\n              stateForAddress = (_a = state[_address]) !== null && _a !== void 0 ? _a : {};\n              stateForAddress[data] = result;\n              state[_address] = stateForAddress;\n            }\n\n            return _context.abrupt(\"return\", state);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _multicall.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}