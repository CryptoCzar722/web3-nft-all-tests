{"ast":null,"code":"import _regeneratorRuntime from \"/Users/andrew/Documents/Work/SIBM-Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/andrew/Documents/Work/SIBM-Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/andrew/Documents/Work/SIBM-Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/andrew/Documents/Work/SIBM-Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/andrew/Documents/Work/SIBM-Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/andrew/Documents/Work/SIBM-Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/andrew/Documents/Work/SIBM-Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/andrew/Documents/Work/SIBM-Test/src/components/NFTForm.js\";\nimport React, { Component } from 'react'; //import { useState } from 'react'\n\nimport './App.css';\nimport Switch from 'react-ios-switch';\nimport FormData from 'form-data'; //import Identicon from 'identicon.js';\n//var QRCode = require('qrcode.react');\n\nvar pinataSDK = require('@pinata/sdk');\n\nvar pinata = pinataSDK('0f3f630bec73946940bd', 'c59ada21cf8e2eac1d19b2eb7177ff6d5d95f4c6a2b962a6d74959c3a7b132e9');\n\nvar axios = require('axios');\n\nvar NFTForm = /*#__PURE__*/function (_Component) {\n  _inherits(NFTForm, _Component);\n\n  function NFTForm(props) {\n    var _this;\n\n    _classCallCheck(this, NFTForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NFTForm).call(this, props));\n\n    _this.onImageChange = function (event) {\n      if (event.target.files && event.target.files[0]) {\n        var img = event.target.files[0];\n        console.log(\"IMG - \", img.name);\n\n        _this.setState({\n          imageName: img.name\n        });\n\n        console.log(\"File location \", './' + img.name); //this.state.setFile) \n\n        _this.setState({\n          setFile: event.target.files[0]\n        });\n\n        _this.setState({\n          image: URL.createObjectURL(img)\n        }); //console.log(\"image - \", this.state.image);\n\n      }\n    };\n\n    _this.state = {\n      account: \"\",\n      seconds: 0,\n      imgBuffer: \"\",\n      revealImg: false,\n      revealImg2: false,\n      image: null,\n      imageName: null,\n      mint_market: true,\n      //IPFS\n      ipfsByteCount: \"0\",\n      pinataConnection: false,\n      nftCount: \"\",\n      setFile: \"\",\n      nftName: \"\",\n      ipfsHash: \"NONE\",\n      ipfsJSONHash: \"\",\n      tokenUri: \"\",\n      //nft contract       \n      nftMintAddress: \"0x96C742592c5b55C17c86B6a996c91C8A812BB91C\",\n      //\"0x760e90639425f52c0295987BfB99046E4CFD72C3\",    //\"0x8A422D1Ea395721423eF544aC95c316e9CbF37f8\",\n      nftMintAbi: [{\n        \"inputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"constructor\"\n      }, {\n        \"anonymous\": false,\n        \"inputs\": [{\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }, {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"approved\",\n          \"type\": \"address\"\n        }, {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }],\n        \"name\": \"Approval\",\n        \"type\": \"event\"\n      }, {\n        \"anonymous\": false,\n        \"inputs\": [{\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }, {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }, {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }],\n        \"name\": \"ApprovalForAll\",\n        \"type\": \"event\"\n      }, {\n        \"anonymous\": false,\n        \"inputs\": [{\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        }, {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        }, {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }],\n        \"name\": \"Transfer\",\n        \"type\": \"event\"\n      }, {\n        \"inputs\": [],\n        \"name\": \"Nft_Id\",\n        \"outputs\": [{\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n      }, {\n        \"inputs\": [],\n        \"name\": \"admin\",\n        \"outputs\": [{\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n      }, {\n        \"inputs\": [{\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        }, {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }],\n        \"name\": \"approve\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n      }, {\n        \"inputs\": [{\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }],\n        \"name\": \"balanceOf\",\n        \"outputs\": [{\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n      }, {\n        \"inputs\": [{\n          \"internalType\": \"string\",\n          \"name\": \"tokenUri\",\n          \"type\": \"string\"\n        }],\n        \"name\": \"createNft\",\n        \"outputs\": [{\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n      }, {\n        \"inputs\": [{\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }],\n        \"name\": \"getApproved\",\n        \"outputs\": [{\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n      }, {\n        \"inputs\": [{\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }, {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }],\n        \"name\": \"isApprovedForAll\",\n        \"outputs\": [{\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n      }, {\n        \"inputs\": [],\n        \"name\": \"name\",\n        \"outputs\": [{\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n      }, {\n        \"inputs\": [{\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }],\n        \"name\": \"ownerOf\",\n        \"outputs\": [{\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n      }, {\n        \"inputs\": [{\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        }, {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        }, {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }],\n        \"name\": \"safeTransferFrom\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n      }, {\n        \"inputs\": [{\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        }, {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        }, {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }, {\n          \"internalType\": \"bytes\",\n          \"name\": \"_data\",\n          \"type\": \"bytes\"\n        }],\n        \"name\": \"safeTransferFrom\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n      }, {\n        \"inputs\": [{\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }, {\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }],\n        \"name\": \"setApprovalForAll\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n      }, {\n        \"inputs\": [{\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }],\n        \"name\": \"supportsInterface\",\n        \"outputs\": [{\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n      }, {\n        \"inputs\": [],\n        \"name\": \"symbol\",\n        \"outputs\": [{\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n      }, {\n        \"inputs\": [{\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }],\n        \"name\": \"tokenURI\",\n        \"outputs\": [{\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n      }, {\n        \"inputs\": [{\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        }, {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        }, {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }],\n        \"name\": \"transferFrom\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n      }],\n\n      /*[\n        {\n          \"inputs\": [],\n          \"stateMutability\": \"nonpayable\",\n          \"type\": \"constructor\"\n        },\n        {\n          \"anonymous\": false,\n          \"inputs\": [\n            {\n              \"indexed\": true,\n              \"internalType\": \"address\",\n              \"name\": \"_to\",\n              \"type\": \"address\"\n            },\n            {\n              \"indexed\": true,\n              \"internalType\": \"uint256\",\n              \"name\": \"_tokenId\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"indexed\": false,\n              \"internalType\": \"string\",\n              \"name\": \"_ipfsHash\",\n              \"type\": \"string\"\n            }\n          ],\n          \"name\": \"Mint\",\n          \"type\": \"event\"\n        },\n        {\n          \"anonymous\": false,\n          \"inputs\": [\n            {\n              \"indexed\": true,\n              \"internalType\": \"address\",\n              \"name\": \"_from\",\n              \"type\": \"address\"\n            },\n            {\n              \"indexed\": true,\n              \"internalType\": \"address\",\n              \"name\": \"_to\",\n              \"type\": \"address\"\n            },\n            {\n              \"indexed\": true,\n              \"internalType\": \"uint256\",\n              \"name\": \"_tokenId\",\n              \"type\": \"uint256\"\n            }\n          ],\n          \"name\": \"Transfer\",\n          \"type\": \"event\"\n        },\n        {\n          \"inputs\": [\n            {\n              \"internalType\": \"address\",\n              \"name\": \"\",\n              \"type\": \"address\"\n            }\n          ],\n          \"name\": \"OwnerToHash\",\n          \"outputs\": [\n            {\n              \"internalType\": \"string\",\n              \"name\": \"\",\n              \"type\": \"string\"\n            }\n          ],\n          \"stateMutability\": \"view\",\n          \"type\": \"function\"\n        },\n        {\n          \"inputs\": [\n            {\n              \"internalType\": \"string\",\n              \"name\": \"_ipfsHash\",\n              \"type\": \"string\"\n            }\n          ],\n          \"name\": \"mint\",\n          \"outputs\": [],\n          \"stateMutability\": \"payable\",\n          \"type\": \"function\"\n        },\n        {\n          \"inputs\": [],\n          \"name\": \"name\",\n          \"outputs\": [\n            {\n              \"internalType\": \"string\",\n              \"name\": \"\",\n              \"type\": \"string\"\n            }\n          ],\n          \"stateMutability\": \"view\",\n          \"type\": \"function\"\n        },\n        {\n          \"inputs\": [],\n          \"name\": \"nftCounter\",\n          \"outputs\": [\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"\",\n              \"type\": \"uint256\"\n            }\n          ],\n          \"stateMutability\": \"view\",\n          \"type\": \"function\"\n        },\n        {\n          \"inputs\": [\n            {\n              \"internalType\": \"address\",\n              \"name\": \"_to\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"_tokenId\",\n              \"type\": \"uint256\"\n            }\n          ],\n          \"name\": \"transfer\",\n          \"outputs\": [],\n          \"stateMutability\": \"nonpayable\",\n          \"type\": \"function\"\n        }\n      ]*/\n      nftMintContract: \"\",\n      nftMintName: \"\",\n      Nft_Id: \"\"\n    }; //this.loadMintContract = this.loadMintContract.bind(this);\n\n    return _this;\n  }\n\n  _createClass(NFTForm, [{\n    key: \"loadMintContract\",\n    value: function () {\n      var _loadMintContract = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var web3, bsChain, accounts, nftMintContract, nftMintName, Nft_Id, API_KEY, API_SECRET, url, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                web3 = window.web3;\n                bsChain = web3.eth;\n                _context.next = 4;\n                return bsChain.getAccounts();\n\n              case 4:\n                accounts = _context.sent;\n                //console.log(\"accounts :: \", accounts[0]);\n                this.setState({\n                  account: accounts[0]\n                });\n                this.state.nftMintAddress = web3.utils.toChecksumAddress(this.state.nftMintAddress);\n                nftMintContract = new bsChain.Contract(this.state.nftMintAbi, this.state.nftMintAddress);\n                this.setState({\n                  nftMintContract: nftMintContract\n                });\n                _context.next = 11;\n                return nftMintContract.methods.name().call();\n\n              case 11:\n                nftMintName = _context.sent;\n                this.setState({\n                  nftMintName: nftMintName\n                });\n                console.log(\"nftMintName :: \", nftMintName);\n                _context.next = 16;\n                return nftMintContract.methods.Nft_Id().call();\n\n              case 16:\n                Nft_Id = _context.sent;\n                Nft_Id = Nft_Id.toString() - 1;\n                console.log(\"Nft_Id :: \", Nft_Id);\n                this.setState({\n                  Nft_Id: Nft_Id\n                }); //TAG call the keys from .env\n\n                API_KEY = '0f3f630bec73946940bd';\n                API_SECRET = 'c59ada21cf8e2eac1d19b2eb7177ff6d5d95f4c6a2b962a6d74959c3a7b132e9'; // the endpoint needed to upload the file\n\n                url = \"https://api.pinata.cloud/data/userPinnedDataTotal\";\n                _context.next = 25;\n                return axios.get(url, {\n                  headers: {\n                    'pinata_api_key': API_KEY,\n                    'pinata_secret_api_key': API_SECRET\n                  }\n                });\n\n              case 25:\n                response = _context.sent;\n                console.log(\" response :: \", response.data.pin_size_total / 1000); // get the hash\n\n                this.setState({\n                  ipfsByteCount: response.data.pin_size_total / 1000\n                });\n\n              case 28:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function loadMintContract() {\n        return _loadMintContract.apply(this, arguments);\n      }\n\n      return loadMintContract;\n    }()\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.loadMintContract();\n      pinata.testAuthentication().then(function (result) {\n        //handle successful authentication here\n        console.log(result);\n\n        _this2.setState({\n          pinataConnection: true\n        });\n      }).catch(function (err) {\n        //handle error here\n        console.log(err);\n\n        _this2.setState({\n          pinataConnection: false\n        });\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.interval);\n    }\n  }, {\n    key: \"PinFilethenMint\",\n    value: function () {\n      var _PinFilethenMint = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var formData, API_KEY, API_SECRET, url, response, tokenUri, urlJs, _response, item_Id, result;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // initialize the form data\n                console.log(\"Pinning\");\n                formData = new FormData(); // append the file form data to \n\n                formData.append(\"file\", this.state.setFile); //TAG call the keys from .env\n\n                API_KEY = '0f3f630bec73946940bd';\n                API_SECRET = 'c59ada21cf8e2eac1d19b2eb7177ff6d5d95f4c6a2b962a6d74959c3a7b132e9'; // the endpoint needed to upload the file\n\n                url = \"https://api.pinata.cloud/pinning/pinFileToIPFS\";\n                _context2.next = 8;\n                return axios.post(url, formData, {\n                  maxContentLength: \"Infinity\",\n                  headers: {\n                    \"Content-Type\": \"multipart/form-data;boundary=\".concat(formData._boundary),\n                    'pinata_api_key': API_KEY,\n                    'pinata_secret_api_key': API_SECRET\n                  }\n                });\n\n              case 8:\n                response = _context2.sent;\n                console.log(response.data.IpfsHash); // get the hash link\n\n                this.setState({\n                  ipfsHash: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash + \"/?preview=1\"\n                });\n                console.log(\"ipfsHash ::\", this.state.ipfsHash);\n\n                if (!(this.state.ipfsHash != \"NONE\")) {\n                  _context2.next = 25;\n                  break;\n                }\n\n                tokenUri = {\n                  \"name\": this.input.value.toString(),\n                  //this.state.nftName,\n                  \"description\": \"NFT minted with SIBM contracts\",\n                  \"image\": this.state.ipfsHash\n                };\n                console.log(tokenUri);\n                urlJs = \"https://api.pinata.cloud/pinning/pinJSONToIPFS\";\n                _context2.next = 18;\n                return axios.post(urlJs, tokenUri, {\n                  headers: {\n                    'pinata_api_key': API_KEY,\n                    'pinata_secret_api_key': API_SECRET\n                  }\n                });\n\n              case 18:\n                _response = _context2.sent;\n                this.setState({\n                  ipfsJSONHash: \"https://gateway.pinata.cloud/ipfs/\" + _response.data.IpfsHash\n                });\n                console.log(\"ipfsJSONHash :: \", this.state.ipfsJSONHash);\n                _context2.next = 23;\n                return this.state.nftMintContract.methods.createNft(this.state.ipfsJSONHash).send({\n                  from: this.state.account\n                });\n\n              case 23:\n                item_Id = _context2.sent;\n                result = window.confirm(\"IMPORTANT used for viewing in metamask! NFT Token ID : \", item_Id.toString());\n\n              case 25:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function PinFilethenMint() {\n        return _PinFilethenMint.apply(this, arguments);\n      }\n\n      return PinFilethenMint;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return /*#__PURE__*/React.createElement(\"form\", {\n        className: \"mb-0\",\n        onSubmit: function onSubmit(event) {\n          event.preventDefault();\n\n          _this3.PinFilethenMint();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 701,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 707,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Switch, {\n        checked: this.state.mint_market,\n        onChange: function onChange(checked) {\n          _this3.setState({\n            mint_market: !_this3.state.mint_market\n          });\n        },\n        offColor: \"yellow\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 713,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 721,\n          columnNumber: 14\n        }\n      }, this.state.mint_market ? /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 729,\n          columnNumber: 15\n        }\n      }, this.state.nftMintName) : /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 730,\n          columnNumber: 15\n        }\n      }, \"NFT MarketPlace Coming Soon\")), /*#__PURE__*/React.createElement(\"table\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 733,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"thead\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 734,\n          columnNumber: 16\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 735,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 736,\n          columnNumber: 19\n        }\n      }, \"NFT's Minted   \"), /*#__PURE__*/React.createElement(\"th\", {\n        width: \"20\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 737,\n          columnNumber: 19\n        }\n      }, \"NFT's Remaining\"), /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 738,\n          columnNumber: 19\n        }\n      }, \"Avg. NFT Size(KB)\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 741,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 742,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 743,\n          columnNumber: 17\n        }\n      }, this.state.Nft_Id, \" \"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 744,\n          columnNumber: 17\n        }\n      }, \" \", parseFloat((1000000 - this.state.ipfsByteCount) / (this.state.ipfsByteCount / this.state.Nft_Id)).toFixed(0), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 745,\n          columnNumber: 17\n        }\n      }, \" \", this.state.ipfsByteCount / this.state.Nft_Id, \" \")))), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 750,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 755,\n          columnNumber: 17\n        }\n      }, \" \", /*#__PURE__*/React.createElement(\"font\", {\n        color: !this.state.pinataConnection ? \"red\" : \"green\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 755,\n          columnNumber: 22\n        }\n      }, this.state.pinataConnection, \" \"))), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 757,\n          columnNumber: 18\n        }\n      }, this.state.ipfsByteCount, \"KB / 1.0 GB\"), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 764,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        height: \"350\",\n        width: \"350\",\n        src: this.state.image,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 769,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 772,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"file\",\n        name: \"myImage\",\n        onChange: this.onImageChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 777,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        onChange: function onChange(event) {\n          var nftName = _this3.input.value.toString();\n\n          _this3.setState({\n            nftName: nftName // * this.props.swapPairPrice\n\n          }); // console.log('nftName :: ', this.state.nftName); \n\n        },\n        ref: function ref(input) {\n          _this3.input = input;\n        },\n        className: \"form-control form-control-lg\",\n        placeholder: \"Give your NFT a Name\",\n        required: true,\n        style: {\n          maxWidth: '650px',\n          justifyContent: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 781,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 797,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.handleFile\n        /*type=\"submit\"*/\n        ,\n        name: \"btn\",\n        className: \"btn btn-primary btn-block btn-lg\",\n        style: {\n          maxWidth: '650px',\n          justifyContent: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 802,\n          columnNumber: 13\n        }\n      }, \" Mint Your Image\")));\n    }\n  }]);\n\n  return NFTForm;\n}(Component);\n\nexport default NFTForm;","map":{"version":3,"sources":["/Users/andrew/Documents/Work/SIBM-Test/src/components/NFTForm.js"],"names":["React","Component","Switch","FormData","pinataSDK","require","pinata","axios","NFTForm","props","onImageChange","event","target","files","img","console","log","name","setState","imageName","setFile","image","URL","createObjectURL","state","account","seconds","imgBuffer","revealImg","revealImg2","mint_market","ipfsByteCount","pinataConnection","nftCount","nftName","ipfsHash","ipfsJSONHash","tokenUri","nftMintAddress","nftMintAbi","nftMintContract","nftMintName","Nft_Id","web3","window","bsChain","eth","getAccounts","accounts","utils","toChecksumAddress","Contract","methods","call","toString","API_KEY","API_SECRET","url","get","headers","response","data","pin_size_total","loadMintContract","testAuthentication","then","result","catch","err","clearInterval","interval","formData","append","post","maxContentLength","_boundary","IpfsHash","input","value","urlJs","createNft","send","from","item_Id","confirm","preventDefault","PinFilethenMint","display","justifyContent","alignItems","checked","parseFloat","toFixed","maxWidth","handleFile"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n//import { useState } from 'react'\nimport './App.css'\nimport Switch from 'react-ios-switch';\nimport FormData from 'form-data';\n\n//import Identicon from 'identicon.js';\n//var QRCode = require('qrcode.react');\n\nconst pinataSDK = require('@pinata/sdk');\nconst pinata = pinataSDK('0f3f630bec73946940bd', 'c59ada21cf8e2eac1d19b2eb7177ff6d5d95f4c6a2b962a6d74959c3a7b132e9');\nconst axios = require('axios');\n\nclass NFTForm extends Component {\n        \n        constructor(props) {\n          super(props);\n          this.state = { \n            account : \"\",\n            seconds : 0,\n            imgBuffer : \"\",\n            revealImg: false,\n            revealImg2: false,\n            image: null,\n            imageName: null,\n            mint_market : true,\n            //IPFS\n            ipfsByteCount : \"0\",\n            pinataConnection : false,\n            nftCount : \"\",\n            setFile : \"\",\n            nftName : \"\",\n            ipfsHash : \"NONE\",\n            ipfsJSONHash : \"\",\n            tokenUri : \"\",\n            //nft contract       \n            nftMintAddress : \"0x96C742592c5b55C17c86B6a996c91C8A812BB91C\", //\"0x760e90639425f52c0295987BfB99046E4CFD72C3\",    //\"0x8A422D1Ea395721423eF544aC95c316e9CbF37f8\",\n            nftMintAbi : [\n              {\n                \"inputs\": [],\n                \"stateMutability\": \"nonpayable\",\n                \"type\": \"constructor\"\n              },\n              {\n                \"anonymous\": false,\n                \"inputs\": [\n                  {\n                    \"indexed\": true,\n                    \"internalType\": \"address\",\n                    \"name\": \"owner\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"indexed\": true,\n                    \"internalType\": \"address\",\n                    \"name\": \"approved\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"indexed\": true,\n                    \"internalType\": \"uint256\",\n                    \"name\": \"tokenId\",\n                    \"type\": \"uint256\"\n                  }\n                ],\n                \"name\": \"Approval\",\n                \"type\": \"event\"\n              },\n              {\n                \"anonymous\": false,\n                \"inputs\": [\n                  {\n                    \"indexed\": true,\n                    \"internalType\": \"address\",\n                    \"name\": \"owner\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"indexed\": true,\n                    \"internalType\": \"address\",\n                    \"name\": \"operator\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"indexed\": false,\n                    \"internalType\": \"bool\",\n                    \"name\": \"approved\",\n                    \"type\": \"bool\"\n                  }\n                ],\n                \"name\": \"ApprovalForAll\",\n                \"type\": \"event\"\n              },\n              {\n                \"anonymous\": false,\n                \"inputs\": [\n                  {\n                    \"indexed\": true,\n                    \"internalType\": \"address\",\n                    \"name\": \"from\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"indexed\": true,\n                    \"internalType\": \"address\",\n                    \"name\": \"to\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"indexed\": true,\n                    \"internalType\": \"uint256\",\n                    \"name\": \"tokenId\",\n                    \"type\": \"uint256\"\n                  }\n                ],\n                \"name\": \"Transfer\",\n                \"type\": \"event\"\n              },\n              {\n                \"inputs\": [],\n                \"name\": \"Nft_Id\",\n                \"outputs\": [\n                  {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"\",\n                    \"type\": \"uint256\"\n                  }\n                ],\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [],\n                \"name\": \"admin\",\n                \"outputs\": [\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"\",\n                    \"type\": \"address\"\n                  }\n                ],\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"to\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"tokenId\",\n                    \"type\": \"uint256\"\n                  }\n                ],\n                \"name\": \"approve\",\n                \"outputs\": [],\n                \"stateMutability\": \"nonpayable\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"owner\",\n                    \"type\": \"address\"\n                  }\n                ],\n                \"name\": \"balanceOf\",\n                \"outputs\": [\n                  {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"\",\n                    \"type\": \"uint256\"\n                  }\n                ],\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [\n                  {\n                    \"internalType\": \"string\",\n                    \"name\": \"tokenUri\",\n                    \"type\": \"string\"\n                  }\n                ],\n                \"name\": \"createNft\",\n                \"outputs\": [\n                  {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"\",\n                    \"type\": \"uint256\"\n                  }\n                ],\n                \"stateMutability\": \"nonpayable\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [\n                  {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"tokenId\",\n                    \"type\": \"uint256\"\n                  }\n                ],\n                \"name\": \"getApproved\",\n                \"outputs\": [\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"\",\n                    \"type\": \"address\"\n                  }\n                ],\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"owner\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"operator\",\n                    \"type\": \"address\"\n                  }\n                ],\n                \"name\": \"isApprovedForAll\",\n                \"outputs\": [\n                  {\n                    \"internalType\": \"bool\",\n                    \"name\": \"\",\n                    \"type\": \"bool\"\n                  }\n                ],\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [],\n                \"name\": \"name\",\n                \"outputs\": [\n                  {\n                    \"internalType\": \"string\",\n                    \"name\": \"\",\n                    \"type\": \"string\"\n                  }\n                ],\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [\n                  {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"tokenId\",\n                    \"type\": \"uint256\"\n                  }\n                ],\n                \"name\": \"ownerOf\",\n                \"outputs\": [\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"\",\n                    \"type\": \"address\"\n                  }\n                ],\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"from\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"to\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"tokenId\",\n                    \"type\": \"uint256\"\n                  }\n                ],\n                \"name\": \"safeTransferFrom\",\n                \"outputs\": [],\n                \"stateMutability\": \"nonpayable\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"from\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"to\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"tokenId\",\n                    \"type\": \"uint256\"\n                  },\n                  {\n                    \"internalType\": \"bytes\",\n                    \"name\": \"_data\",\n                    \"type\": \"bytes\"\n                  }\n                ],\n                \"name\": \"safeTransferFrom\",\n                \"outputs\": [],\n                \"stateMutability\": \"nonpayable\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"operator\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"internalType\": \"bool\",\n                    \"name\": \"approved\",\n                    \"type\": \"bool\"\n                  }\n                ],\n                \"name\": \"setApprovalForAll\",\n                \"outputs\": [],\n                \"stateMutability\": \"nonpayable\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [\n                  {\n                    \"internalType\": \"bytes4\",\n                    \"name\": \"interfaceId\",\n                    \"type\": \"bytes4\"\n                  }\n                ],\n                \"name\": \"supportsInterface\",\n                \"outputs\": [\n                  {\n                    \"internalType\": \"bool\",\n                    \"name\": \"\",\n                    \"type\": \"bool\"\n                  }\n                ],\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [],\n                \"name\": \"symbol\",\n                \"outputs\": [\n                  {\n                    \"internalType\": \"string\",\n                    \"name\": \"\",\n                    \"type\": \"string\"\n                  }\n                ],\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [\n                  {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"tokenId\",\n                    \"type\": \"uint256\"\n                  }\n                ],\n                \"name\": \"tokenURI\",\n                \"outputs\": [\n                  {\n                    \"internalType\": \"string\",\n                    \"name\": \"\",\n                    \"type\": \"string\"\n                  }\n                ],\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"from\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"to\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"tokenId\",\n                    \"type\": \"uint256\"\n                  }\n                ],\n                \"name\": \"transferFrom\",\n                \"outputs\": [],\n                \"stateMutability\": \"nonpayable\",\n                \"type\": \"function\"\n              }\n            ],\n            /*[\n              {\n                \"inputs\": [],\n                \"stateMutability\": \"nonpayable\",\n                \"type\": \"constructor\"\n              },\n              {\n                \"anonymous\": false,\n                \"inputs\": [\n                  {\n                    \"indexed\": true,\n                    \"internalType\": \"address\",\n                    \"name\": \"_to\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"indexed\": true,\n                    \"internalType\": \"uint256\",\n                    \"name\": \"_tokenId\",\n                    \"type\": \"uint256\"\n                  },\n                  {\n                    \"indexed\": false,\n                    \"internalType\": \"string\",\n                    \"name\": \"_ipfsHash\",\n                    \"type\": \"string\"\n                  }\n                ],\n                \"name\": \"Mint\",\n                \"type\": \"event\"\n              },\n              {\n                \"anonymous\": false,\n                \"inputs\": [\n                  {\n                    \"indexed\": true,\n                    \"internalType\": \"address\",\n                    \"name\": \"_from\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"indexed\": true,\n                    \"internalType\": \"address\",\n                    \"name\": \"_to\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"indexed\": true,\n                    \"internalType\": \"uint256\",\n                    \"name\": \"_tokenId\",\n                    \"type\": \"uint256\"\n                  }\n                ],\n                \"name\": \"Transfer\",\n                \"type\": \"event\"\n              },\n              {\n                \"inputs\": [\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"\",\n                    \"type\": \"address\"\n                  }\n                ],\n                \"name\": \"OwnerToHash\",\n                \"outputs\": [\n                  {\n                    \"internalType\": \"string\",\n                    \"name\": \"\",\n                    \"type\": \"string\"\n                  }\n                ],\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [\n                  {\n                    \"internalType\": \"string\",\n                    \"name\": \"_ipfsHash\",\n                    \"type\": \"string\"\n                  }\n                ],\n                \"name\": \"mint\",\n                \"outputs\": [],\n                \"stateMutability\": \"payable\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [],\n                \"name\": \"name\",\n                \"outputs\": [\n                  {\n                    \"internalType\": \"string\",\n                    \"name\": \"\",\n                    \"type\": \"string\"\n                  }\n                ],\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [],\n                \"name\": \"nftCounter\",\n                \"outputs\": [\n                  {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"\",\n                    \"type\": \"uint256\"\n                  }\n                ],\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"_to\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"_tokenId\",\n                    \"type\": \"uint256\"\n                  }\n                ],\n                \"name\": \"transfer\",\n                \"outputs\": [],\n                \"stateMutability\": \"nonpayable\",\n                \"type\": \"function\"\n              }\n            ]*/\n            nftMintContract : \"\",\n            nftMintName : \"\",\n            Nft_Id : \"\"\n\n          };\n          //this.loadMintContract = this.loadMintContract.bind(this);\n        }\n        \n        async loadMintContract()\n            {\n            const web3 = window.web3\n            const bsChain = web3.eth\n\n            const accounts = await bsChain.getAccounts()\n            //console.log(\"accounts :: \", accounts[0]);\n            this.setState({account : accounts[0]});\n\n            this.state.nftMintAddress = web3.utils.toChecksumAddress(this.state.nftMintAddress);\n            const nftMintContract = new bsChain.Contract(this.state.nftMintAbi, this.state.nftMintAddress);\n            this.setState({nftMintContract});\n\n            let nftMintName = await nftMintContract.methods.name().call();\n            this.setState({nftMintName}); \n            console.log(\"nftMintName :: \",nftMintName);\n\n            let Nft_Id = await nftMintContract.methods.Nft_Id().call();\n            \n            Nft_Id = Nft_Id.toString() - 1;\n            console.log(\"Nft_Id :: \",Nft_Id);\n            this.setState({Nft_Id}); \n\n            //TAG call the keys from .env\n            const API_KEY = '0f3f630bec73946940bd';\n            const API_SECRET = 'c59ada21cf8e2eac1d19b2eb7177ff6d5d95f4c6a2b962a6d74959c3a7b132e9';\n            \n            // the endpoint needed to upload the file\n            const url =  `https://api.pinata.cloud/data/userPinnedDataTotal`\n      \n            const response = await axios.get(\n              url,\n              {\n                headers: {\n                    'pinata_api_key': API_KEY,\n                    'pinata_secret_api_key': API_SECRET\n                }\n              }\n              )\n            console.log( \" response :: \",response.data.pin_size_total / 1000)\n          // get the hash\n          this.setState({ipfsByteCount : response.data.pin_size_total / 1000})\n\n            }\n      \n        componentDidMount() {\n          this.loadMintContract(); \n\n          pinata.testAuthentication().then((result) => {\n            //handle successful authentication here\n              console.log(result);\n              this.setState({pinataConnection : true});\n            }).catch((err) => {\n              //handle error here\n              console.log(err);\n              this.setState({pinataConnection : false});\n          });\n        }\n      \n        componentWillUnmount() {\n          clearInterval(this.interval);\n        }\n\n        onImageChange = event => {\n          if (event.target.files && event.target.files[0]) {\n            let img = event.target.files[0];\n            console.log(\"IMG - \", img.name);\n            \n            this.setState({imageName : img.name})\n            \n            \n            console.log(\"File location \", './'+img.name)  //this.state.setFile) \n            this.setState({setFile : event.target.files[0]})\n\n            this.setState({\n              image: URL.createObjectURL(img)\n            });\n            //console.log(\"image - \", this.state.image);\n          }\n                     \n       };\n\n       async PinFilethenMint(){\n        // initialize the form data\n        console.log(\"Pinning\");\n        const formData = new FormData()\n        // append the file form data to \n        formData.append(\"file\", this.state.setFile)\n        //TAG call the keys from .env\n        const API_KEY = '0f3f630bec73946940bd';\n        const API_SECRET = 'c59ada21cf8e2eac1d19b2eb7177ff6d5d95f4c6a2b962a6d74959c3a7b132e9';\n        // the endpoint needed to upload the file\n        const url =  `https://api.pinata.cloud/pinning/pinFileToIPFS`\n  \n        const response = await axios.post(\n          url,\n          formData,\n          {\n              maxContentLength: \"Infinity\",\n              headers: {\n                  \"Content-Type\": `multipart/form-data;boundary=${formData._boundary}`, \n                  'pinata_api_key': API_KEY,\n                  'pinata_secret_api_key': API_SECRET\n              }\n          })\n          console.log(response.data.IpfsHash)\n          // get the hash link\n          this.setState({ipfsHash: \"https://gateway.pinata.cloud/ipfs/\"+response.data.IpfsHash+\"/?preview=1\"});\n          console.log(\"ipfsHash ::\", this.state.ipfsHash);\n          \n          \n          if (this.state.ipfsHash != \"NONE\")\n            {\n            let tokenUri = {\n              \"name\" : this.input.value.toString(),//this.state.nftName,\n              \"description\" : \"NFT minted with SIBM contracts\",\n              \"image\" : this.state.ipfsHash\n            }\n            console.log(tokenUri);\n            \n            const urlJs =  `https://api.pinata.cloud/pinning/pinJSONToIPFS`\n\n            const response = await axios.post(\n              urlJs,\n              tokenUri,\n              {\n                  headers: {\n                      'pinata_api_key': API_KEY,\n                      'pinata_secret_api_key': API_SECRET\n                  }\n              })\n              this.setState({ipfsJSONHash: \"https://gateway.pinata.cloud/ipfs/\"+response.data.IpfsHash})\n              console.log(\"ipfsJSONHash :: \", this.state.ipfsJSONHash)\n              let item_Id = await this.state.nftMintContract.methods.createNft(this.state.ipfsJSONHash).send({from :this.state.account});\n              let result = window.confirm(\"IMPORTANT used for viewing in metamask! NFT Token ID : \", item_Id.toString());\n            }\n      }\n    \n        render() {\n          return (\n            <form className=\"mb-0\" onSubmit={(event) => {\n                event.preventDefault()                \n                this.PinFilethenMint();\n                \n                }}>\n\n            <div style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\"\n              }}>\n              \n              <Switch\n                checked={this.state.mint_market}\n                onChange={checked => {this.setState({mint_market : !this.state.mint_market})}}\n                offColor=\"yellow\"\n              />\n              \n             </div>\n\n             <div style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n              }}>\n              {\n              this.state.mint_market\n              ?\n              <b>{this.state.nftMintName}</b> :\n              <b>NFT MarketPlace Coming Soon</b>\n              }\n                </div>\n              <table>\n               <thead>\n                <tr>\n                  <th>NFT's Minted   </th>\n                  <th  width=\"20\" >NFT's Remaining</th>\n                  <th>Avg. NFT Size(KB)</th>\n                </tr>\n               </thead>\n              <tbody>\n              <tr>\n                <td>{this.state.Nft_Id} </td>\n                <td> {parseFloat((1000000 - this.state.ipfsByteCount) / (this.state.ipfsByteCount / this.state.Nft_Id)).toFixed(0)} </td>\n                <td> {this.state.ipfsByteCount / this.state.Nft_Id} </td>\n                </tr>\n              </tbody>\n              </table>\n\n                <div style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\"\n                  }}>\n                <h1> <font color={(!this.state.pinataConnection) ? \"red\" :\"green\"}>{this.state.pinataConnection} </font></h1> \n                 </div>\n                 <div style={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  alignItems: \"center\"\n                    }}>\n                { this.state.ipfsByteCount}KB / 1.0 GB   \n                 </div>\n            <div style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n              }}>\n            <img height=\"350\" width=\"350\" src={this.state.image} />\n            </div>\n\n            <div style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n              }}>\n            <input type=\"file\" name=\"myImage\" onChange={this.onImageChange} />\n            </div>\n\n\n            <input\n            type=\"text\"\n            onChange={(event) => {\n              const nftName = this.input.value.toString()\n              this.setState({\n                nftName: nftName // * this.props.swapPairPrice\n              }) \n             // console.log('nftName :: ', this.state.nftName); \n            }}\n            ref={(input) => { this.input = input }}\n            className=\"form-control form-control-lg\"\n            placeholder=\"Give your NFT a Name\"\n            required\n            style={{ maxWidth: '650px', justifyContent:'center'}}\n             />\n\n            <div style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n              }}>\n            <button onClick={this.handleFile}/*type=\"submit\"*/ name=\"btn\" className=\"btn btn-primary btn-block btn-lg\" style={{ maxWidth: '650px', justifyContent:'center'}}> Mint Your Image</button>\n            \n            </div>\n            </form>\n          );\n        }\n      }\n      \n      export default NFTForm;\n  "]},"metadata":{},"sourceType":"module"}