{"ast":null,"code":"import _regeneratorRuntime from \"/Users/andrew/Documents/Work/SIBM-Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/andrew/Documents/Work/SIBM-Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/andrew/Documents/Work/SIBM-Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useState } from 'react';\nimport { InjectedNetworkContext } from './context';\nimport { getInjectedProvider } from '../../helpers/injectedProvider';\nimport { useNetwork } from '../network';\nimport { useConfig } from '../config';\nexport function InjectedNetworkProvider(_ref) {\n  var children = _ref.children;\n\n  var _useNetwork = useNetwork(),\n      reportError = _useNetwork.reportError;\n\n  var _useConfig = useConfig(),\n      pollingInterval = _useConfig.pollingInterval;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      injectedProvider = _useState2[0],\n      setInjectedProvider = _useState2[1];\n\n  useEffect(function () {\n    getInjectedProvider(pollingInterval).then(setInjectedProvider);\n  }, []);\n  var connect = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (injectedProvider) {\n              _context.next = 3;\n              break;\n            }\n\n            reportError(new Error('No injected provider available'));\n            return _context.abrupt(\"return\");\n\n          case 3:\n            _context.prev = 3;\n            _context.next = 6;\n            return injectedProvider.send('eth_requestAccounts', []);\n\n          case 6:\n            return _context.abrupt(\"return\", injectedProvider);\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](3);\n            reportError(_context.t0);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[3, 9]]);\n  })), [injectedProvider]);\n  return _jsx(InjectedNetworkContext.Provider, {\n    value: {\n      injectedProvider: injectedProvider,\n      connect: connect\n    },\n    children: children\n  }, void 0);\n}","map":null,"metadata":{},"sourceType":"module"}