{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // > packages\n\nvar React = __importStar(require(\"react\"));\n\nvar semver_sort_1 = __importDefault(require(\"semver-sort\")); // > components\n\n\nvar Milestone_1 = __importDefault(require(\"./Milestone\"));\n/**\n * Renders a list of milestones\n */\n\n\nvar RoadmapProgress =\n/** @class */\nfunction (_super) {\n  __extends(RoadmapProgress, _super);\n\n  function RoadmapProgress(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.state = {\n      milestones: []\n    }; // bind methods\n\n    _this.orderMilestonesByVersion = _this.orderMilestonesByVersion.bind(_this);\n    _this.buildTimelineBarProps = _this.buildTimelineBarProps.bind(_this);\n    _this.renderMilestone = _this.renderMilestone.bind(_this);\n    return _this;\n  }\n\n  RoadmapProgress.prototype.componentDidMount = function () {\n    this.setState({\n      milestones: this.orderMilestonesByVersion(this.props.milestones)\n    });\n  };\n\n  RoadmapProgress.prototype.componentWillReceiveProps = function (nextProps) {\n    this.setState({\n      milestones: this.orderMilestonesByVersion(nextProps.milestones)\n    });\n  };\n  /**\n   * Orders an array of milestones by their semantic \"version\"\n   * (descending order)\n   *\n   * @param {iMilestone[]} milestones\n   * @returns {iMilestone[]}\n   */\n\n\n  RoadmapProgress.prototype.orderMilestonesByVersion = function (milestones) {\n    // todo: this works but it's not very efficient. Does a lot of lookups.\n    return semver_sort_1.default.desc(milestones.map(function (milestone) {\n      return milestone.version;\n    })).map(function (version) {\n      return milestones.filter(function (milestone) {\n        return milestone.version === version;\n      })[0];\n    });\n  };\n  /**\n   * Builds the props required to render a single <Milestone> component,\n   * considering the context of where a single milestone is in the roadmap.\n   *\n   * @param {iMilestones} milestones\n   * @param {number} index\n   * @returns {iMilestoneProps}\n   */\n\n\n  RoadmapProgress.prototype.buildTimelineBarProps = function (milestones, index) {\n    var previous = milestones[index - 1];\n    var current = milestones[index];\n    var next = milestones[index + 1];\n    var props = {}; // something went wrong if the milestone can't be accessed\n\n    if (!current) {\n      return props;\n    } // determines whether a milestone is 100% complete or not\n\n\n    var completePercent = function completePercent(complete) {\n      if (!complete) {\n        return 0;\n      }\n\n      if (complete === true) {\n        return 100;\n      }\n\n      return complete;\n    };\n\n    var isComplete = function isComplete(milestone) {\n      return completePercent(milestone.complete) >= 100;\n    }; // whether current milestone, and all previous ones, are complete\n\n\n    var generationallyCompleteReducer = function generationallyCompleteReducer(prev, current) {\n      return prev && isComplete(current);\n    };\n\n    var isGenerationallyComplete = isComplete(current) && milestones.slice(index).reduce(generationallyCompleteReducer, true); // @see test for more verbosity\n\n    if (!previous) {\n      props.backgroundRoundedStart = true;\n    }\n\n    if (!next) {\n      props.backgroundRoundedEnd = true;\n    }\n\n    if (completePercent(current.complete) > 0) {\n      props.barHeightPercent = completePercent(current.complete);\n\n      if (isGenerationallyComplete) {\n        props.barType = 'complete';\n      } else {\n        props.barType = 'pending';\n      }\n\n      if (!previous || completePercent(current.complete) < 100 || previous && completePercent(previous.complete) < 1) {\n        // if (!previous || (previous && !isComplete(previous))) {\n        props.barRoundedStart = true;\n      }\n\n      if (!next || next && !isComplete(next)) {\n        props.barRoundedEnd = true;\n      }\n    }\n\n    if (isGenerationallyComplete && (!previous || !isComplete(previous))) {\n      props.peakHighlight = true;\n    }\n\n    return props;\n  };\n  /**\n   * Renders a single milestone\n   *\n   * @param milestone\n   */\n\n\n  RoadmapProgress.prototype.renderMilestone = function (milestone) {\n    var milestones = this.state.milestones;\n    var index = milestones.indexOf(milestone); // something went wrong if index is -1!\n\n    if (index < 0) {\n      return null;\n    }\n\n    var timelineBarProps = this.buildTimelineBarProps(milestones, index);\n    return React.createElement(Milestone_1.default, {\n      key: index,\n      milestone: milestone,\n      timelineBarProps: timelineBarProps\n    });\n  };\n\n  RoadmapProgress.prototype.render = function () {\n    var milestones = this.state.milestones;\n\n    if (!milestones) {\n      return null;\n    }\n\n    return React.createElement(\"div\", {\n      className: \"roadmap-progress\"\n    }, milestones.map(this.renderMilestone));\n  };\n\n  return RoadmapProgress;\n}(React.Component);\n\nexports.RoadmapProgress = RoadmapProgress;\nexports.default = RoadmapProgress;","map":null,"metadata":{},"sourceType":"script"}