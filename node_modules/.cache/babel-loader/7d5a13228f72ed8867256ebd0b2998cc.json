{"ast":null,"code":"import _regeneratorRuntime from \"/Users/andrew/Documents/Work/SIBM-Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/andrew/Documents/Work/SIBM-Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/andrew/Documents/Work/SIBM-Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/andrew/Documents/Work/SIBM-Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/andrew/Documents/Work/SIBM-Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/andrew/Documents/Work/SIBM-Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/andrew/Documents/Work/SIBM-Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/andrew/Documents/Work/SIBM-Test/src/components/NFTForm.js\";\nimport React, { Component } from 'react'; //import { useState } from 'react'\n\nimport './App.css';\nimport Switch from 'react-ios-switch';\nimport FormData from 'form-data'; //import Identicon from 'identicon.js';\n//var QRCode = require('qrcode.react');\n//Exhange contract v0\n//0x8B68984546d5BE5089eBf791533a10267df8D107\n//exchange contract v0.1\n//0x26a0f03E7A43C1cd77029e0B902DcBfFB5e1E9Fa\n//0x26a0f03E7A43C1cd77029e0B902DcBfFB5e1E9Fa\n\nvar pinataSDK = require('@pinata/sdk');\n\nvar pinata = pinataSDK('0f3f630bec73946940bd', 'c59ada21cf8e2eac1d19b2eb7177ff6d5d95f4c6a2b962a6d74959c3a7b132e9');\n\nvar axios = require('axios');\n\nvar NFTForm = /*#__PURE__*/function (_Component) {\n  _inherits(NFTForm, _Component);\n\n  function NFTForm(props) {\n    var _this;\n\n    _classCallCheck(this, NFTForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NFTForm).call(this, props));\n\n    _this.onImageChange = function (event) {\n      if (event.target.files && event.target.files[0]) {\n        var img = event.target.files[0];\n        console.log(\"IMG - \", img.name);\n\n        _this.setState({\n          imageName: img.name\n        });\n\n        console.log(\"File location \", './' + img.name); //this.state.setFile) \n\n        _this.setState({\n          setFile: event.target.files[0]\n        });\n\n        _this.setState({\n          image: URL.createObjectURL(img)\n        }); //console.log(\"image - \", this.state.image);\n\n      }\n    };\n\n    _this.state = {\n      account: \"\",\n      seconds: 0,\n      imgBuffer: \"\",\n      revealImg: false,\n      revealImg2: false,\n      image: null,\n      imageName: null,\n      mint_market: true,\n      pinataConnection: false,\n      nftCount: \"\",\n      setFile: \"\",\n      nftName: \"\",\n      ipfsHash: \"NONE\",\n      ipfsJSONHash: \"\",\n      tokenUri: \"\",\n      //nft contract\n      nftMintAddress: \"0x8A422D1Ea395721423eF544aC95c316e9CbF37f8\",\n      nftMintAbi: [{\n        \"anonymous\": false,\n        \"inputs\": [{\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"_to\",\n          \"type\": \"address\"\n        }, {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"_tokenId\",\n          \"type\": \"uint256\"\n        }, {\n          \"indexed\": false,\n          \"internalType\": \"bytes32\",\n          \"name\": \"_ipfsHash\",\n          \"type\": \"bytes32\"\n        }],\n        \"name\": \"Mint\",\n        \"type\": \"event\"\n      }, {\n        \"anonymous\": false,\n        \"inputs\": [{\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"_from\",\n          \"type\": \"address\"\n        }, {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"_to\",\n          \"type\": \"address\"\n        }, {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"_tokenId\",\n          \"type\": \"uint256\"\n        }],\n        \"name\": \"Transfer\",\n        \"type\": \"event\"\n      }, {\n        \"inputs\": [{\n          \"internalType\": \"bytes32\",\n          \"name\": \"_ipfsHash\",\n          \"type\": \"bytes32\"\n        }],\n        \"name\": \"mint\",\n        \"outputs\": [],\n        \"stateMutability\": \"payable\",\n        \"type\": \"function\"\n      }, {\n        \"inputs\": [],\n        \"name\": \"name\",\n        \"outputs\": [{\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n      }, {\n        \"inputs\": [{\n          \"internalType\": \"address\",\n          \"name\": \"_to\",\n          \"type\": \"address\"\n        }, {\n          \"internalType\": \"uint256\",\n          \"name\": \"_tokenId\",\n          \"type\": \"uint256\"\n        }],\n        \"name\": \"transfer\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n      }],\n      nftMintContract: \"\",\n      nftMintName: \"\"\n    }; //this.loadMintContract = this.loadMintContract.bind(this);\n\n    return _this;\n  }\n\n  _createClass(NFTForm, [{\n    key: \"loadMintContract\",\n    value: function () {\n      var _loadMintContract = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var web3, bsChain, accounts, nftMintContract, approved;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                web3 = window.web3;\n                bsChain = web3.eth;\n                _context.next = 4;\n                return bsChain.getAccounts();\n\n              case 4:\n                accounts = _context.sent;\n                //console.log(\"accounts :: \", accounts[0]);\n                this.setState({\n                  account: accounts[0]\n                });\n                this.state.nftMintAddress = web3.utils.toChecksumAddress(this.state.nftMintAddress);\n                nftMintContract = new bsChain.Contract(this.state.nftMintAbi, this.state.nftMintAddress);\n                this.setState({\n                  nftMintContract: nftMintContract\n                });\n                _context.next = 11;\n                return PresaleContract.methods.confirmedOrders(this.state.account).call();\n\n              case 11:\n                approved = _context.sent;\n                this.setState({\n                  approved: approved.toString()\n                });\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function loadMintContract() {\n        return _loadMintContract.apply(this, arguments);\n      }\n\n      return loadMintContract;\n    }()\n    /*reveal(){\n      //this.setState({revealImg : !this.state.revealImg});\n      this.setState(state => ({\n        revealImg: !this.state.revealImg\n    }));\n    }\n     reveal2(){\n      //this.setState({revealImg : !this.state.revealImg});\n      this.setState(state => ({\n        revealImg2: !this.state.revealImg2\n    }));\n    }*/\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      //localStorage.setItem('Timer', 0)\n      //this.interval = setInterval(() => this.tick(), 1000);\n      this.reveal = this.reveal.bind(this);\n      this.reveal2 = this.reveal2.bind(this);\n      pinata.testAuthentication().then(function (result) {\n        //handle successful authentication here\n        console.log(result);\n\n        _this2.setState({\n          pinataConnection: true\n        });\n      }).catch(function (err) {\n        //handle error here\n        console.log(err);\n\n        _this2.setState({\n          pinataConnection: false\n        });\n      }); //this.reveal = setInterval(() => this.tick(), 0);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.interval);\n    }\n  }, {\n    key: \"PinFile\",\n    value: function () {\n      var _PinFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var formData, API_KEY, API_SECRET, url, response, tokenUri, urlJs, _response;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // initialize the form data\n                console.log(\"Pinning\");\n                formData = new FormData(); // append the file form data to \n\n                formData.append(\"file\", this.state.setFile); //TAG call the keys from .env\n\n                API_KEY = '0f3f630bec73946940bd';\n                API_SECRET = 'c59ada21cf8e2eac1d19b2eb7177ff6d5d95f4c6a2b962a6d74959c3a7b132e9'; // the endpoint needed to upload the file\n\n                url = \"https://api.pinata.cloud/pinning/pinFileToIPFS\";\n                _context2.next = 8;\n                return axios.post(url, formData, {\n                  maxContentLength: \"Infinity\",\n                  headers: {\n                    \"Content-Type\": \"multipart/form-data;boundary=\".concat(formData._boundary),\n                    'pinata_api_key': API_KEY,\n                    'pinata_secret_api_key': API_SECRET\n                  }\n                });\n\n              case 8:\n                response = _context2.sent;\n                console.log(response.data.IpfsHash); // get the hash\n\n                this.setState({\n                  ipfsHash: response.data.IpfsHash\n                });\n\n                if (!(this.state.ipfsHash != \"NONE\")) {\n                  _context2.next = 20;\n                  break;\n                }\n\n                tokenUri = {\n                  \"name\": this.input.value.toString(),\n                  //this.state.nftName,\n                  \"description\": \"NFT minted with SIBM contracts\",\n                  \"image\": \"https://ipfs.io/ipfs/\" + this.state.ipfsHash + \"/\" + this.state.imageName,\n                  \"attributes\": [{\n                    \"trait_type\": \"Rank\",\n                    \"value\": this.state.nftCount\n                  }]\n                };\n                console.log(tokenUri);\n                urlJs = \"https://api.pinata.cloud/pinning/pinJSONToIPFS\";\n                _context2.next = 17;\n                return axios.post(urlJs, tokenUri, {\n                  headers: {\n                    'pinata_api_key': API_KEY,\n                    'pinata_secret_api_key': API_SECRET\n                  }\n                });\n\n              case 17:\n                _response = _context2.sent;\n                console.log(\"JSON hash :: \", _response.data.IpfsHash); // get the hash\n\n                this.setState({\n                  ipfsJSONHash: _response.data.IpfsHash\n                });\n\n              case 20:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function PinFile() {\n        return _PinFile.apply(this, arguments);\n      }\n\n      return PinFile;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return /*#__PURE__*/React.createElement(\"form\", {\n        className: \"mb-0\",\n        onSubmit: function onSubmit(event) {\n          event.preventDefault();\n\n          _this3.PinFile();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Switch, {\n        checked: this.state.mint_market,\n        onChange: function onChange(checked) {\n          _this3.setState({\n            mint_market: !_this3.state.mint_market\n          });\n        },\n        offColor: \"yellow\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 14\n        }\n      }, this.state.mint_market ? /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 15\n        }\n      }, \"NFT Minting\") : /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 15\n        }\n      }, \"NFT MarketPlace Coming Soon\")), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 17\n        }\n      }, \" \", /*#__PURE__*/React.createElement(\"font\", {\n        color: !this.state.pinataConnection ? \"red\" : \"green\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 22\n        }\n      }, this.state.pinataConnection, \" \"))), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        height: \"250\",\n        width: \"250\",\n        src: this.state.image,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"file\",\n        name: \"myImage\",\n        onChange: this.onImageChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        onChange: function onChange(event) {\n          var nftName = _this3.input.value.toString();\n\n          _this3.setState({\n            nftName: nftName // * this.props.swapPairPrice\n\n          }); // console.log('nftName :: ', this.state.nftName); \n\n        },\n        ref: function ref(input) {\n          _this3.input = input;\n        },\n        className: \"form-control form-control-lg\",\n        placeholder: \"Give your NFT a Name\",\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.handleFile\n        /*type=\"submit\"*/\n        ,\n        name: \"btn\",\n        className: \"btn btn-primary btn-block btn-lg\",\n        style: {\n          maxWidth: '325px',\n          justifyContent: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 13\n        }\n      }, \" Mint Your Image\")));\n    }\n  }]);\n\n  return NFTForm;\n}(Component);\n\nexport default NFTForm;","map":{"version":3,"sources":["/Users/andrew/Documents/Work/SIBM-Test/src/components/NFTForm.js"],"names":["React","Component","Switch","FormData","pinataSDK","require","pinata","axios","NFTForm","props","onImageChange","event","target","files","img","console","log","name","setState","imageName","setFile","image","URL","createObjectURL","state","account","seconds","imgBuffer","revealImg","revealImg2","mint_market","pinataConnection","nftCount","nftName","ipfsHash","ipfsJSONHash","tokenUri","nftMintAddress","nftMintAbi","nftMintContract","nftMintName","web3","window","bsChain","eth","getAccounts","accounts","utils","toChecksumAddress","Contract","PresaleContract","methods","confirmedOrders","call","approved","toString","reveal","bind","reveal2","testAuthentication","then","result","catch","err","clearInterval","interval","formData","append","API_KEY","API_SECRET","url","post","maxContentLength","headers","_boundary","response","data","IpfsHash","input","value","urlJs","preventDefault","PinFile","display","justifyContent","alignItems","checked","handleFile","maxWidth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n//import { useState } from 'react'\nimport './App.css'\nimport Switch from 'react-ios-switch';\nimport FormData from 'form-data';\n\n//import Identicon from 'identicon.js';\n//var QRCode = require('qrcode.react');\n\n//Exhange contract v0\n//0x8B68984546d5BE5089eBf791533a10267df8D107\n//exchange contract v0.1\n//0x26a0f03E7A43C1cd77029e0B902DcBfFB5e1E9Fa\n//0x26a0f03E7A43C1cd77029e0B902DcBfFB5e1E9Fa\n\nconst pinataSDK = require('@pinata/sdk');\nconst pinata = pinataSDK('0f3f630bec73946940bd', 'c59ada21cf8e2eac1d19b2eb7177ff6d5d95f4c6a2b962a6d74959c3a7b132e9');\nconst axios = require('axios');\n\nclass NFTForm extends Component {\n        \n        constructor(props) {\n          super(props);\n          this.state = { \n            account : \"\",\n            seconds : 0,\n            imgBuffer : \"\",\n            revealImg: false,\n            revealImg2: false,\n            image: null,\n            imageName: null,\n            mint_market : true,\n            pinataConnection : false,\n            nftCount : \"\",\n            setFile : \"\",\n            nftName : \"\",\n            ipfsHash : \"NONE\",\n            ipfsJSONHash : \"\",\n            tokenUri : \"\",\n\n            //nft contract\n            nftMintAddress : \"0x8A422D1Ea395721423eF544aC95c316e9CbF37f8\",\n            nftMintAbi : [\n              {\n                \"anonymous\": false,\n                \"inputs\": [\n                  {\n                    \"indexed\": true,\n                    \"internalType\": \"address\",\n                    \"name\": \"_to\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"indexed\": true,\n                    \"internalType\": \"uint256\",\n                    \"name\": \"_tokenId\",\n                    \"type\": \"uint256\"\n                  },\n                  {\n                    \"indexed\": false,\n                    \"internalType\": \"bytes32\",\n                    \"name\": \"_ipfsHash\",\n                    \"type\": \"bytes32\"\n                  }\n                ],\n                \"name\": \"Mint\",\n                \"type\": \"event\"\n              },\n              {\n                \"anonymous\": false,\n                \"inputs\": [\n                  {\n                    \"indexed\": true,\n                    \"internalType\": \"address\",\n                    \"name\": \"_from\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"indexed\": true,\n                    \"internalType\": \"address\",\n                    \"name\": \"_to\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"indexed\": true,\n                    \"internalType\": \"uint256\",\n                    \"name\": \"_tokenId\",\n                    \"type\": \"uint256\"\n                  }\n                ],\n                \"name\": \"Transfer\",\n                \"type\": \"event\"\n              },\n              {\n                \"inputs\": [\n                  {\n                    \"internalType\": \"bytes32\",\n                    \"name\": \"_ipfsHash\",\n                    \"type\": \"bytes32\"\n                  }\n                ],\n                \"name\": \"mint\",\n                \"outputs\": [],\n                \"stateMutability\": \"payable\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [],\n                \"name\": \"name\",\n                \"outputs\": [\n                  {\n                    \"internalType\": \"string\",\n                    \"name\": \"\",\n                    \"type\": \"string\"\n                  }\n                ],\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"_to\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"_tokenId\",\n                    \"type\": \"uint256\"\n                  }\n                ],\n                \"name\": \"transfer\",\n                \"outputs\": [],\n                \"stateMutability\": \"nonpayable\",\n                \"type\": \"function\"\n              }\n            ],\n            nftMintContract : \"\",\n            nftMintName : \"\"\n\n          };\n          //this.loadMintContract = this.loadMintContract.bind(this);\n        }\n        \n        async loadMintContract()\n            {\n            const web3 = window.web3\n            const bsChain = web3.eth\n\n            const accounts = await bsChain.getAccounts()\n            //console.log(\"accounts :: \", accounts[0]);\n            this.setState({account : accounts[0]});\n\n            this.state.nftMintAddress = web3.utils.toChecksumAddress(this.state.nftMintAddress);\n            const nftMintContract = new bsChain.Contract(this.state.nftMintAbi, this.state.nftMintAddress);\n            this.setState({nftMintContract});\n\n            let approved = await PresaleContract.methods.confirmedOrders(this.state.account).call();\n            this.setState({approved : approved.toString()});\n\n            }\n\n\n\n        /*reveal(){\n          //this.setState({revealImg : !this.state.revealImg});\n          this.setState(state => ({\n            revealImg: !this.state.revealImg\n        }));\n        }\n\n        reveal2(){\n          //this.setState({revealImg : !this.state.revealImg});\n          this.setState(state => ({\n            revealImg2: !this.state.revealImg2\n        }));\n        }*/\n      \n        componentDidMount() {\n          //localStorage.setItem('Timer', 0)\n          //this.interval = setInterval(() => this.tick(), 1000);\n          this.reveal = this.reveal.bind(this);\n          this.reveal2 = this.reveal2.bind(this);\n          pinata.testAuthentication().then((result) => {\n            //handle successful authentication here\n              console.log(result);\n              this.setState({pinataConnection : true});\n            }).catch((err) => {\n              //handle error here\n              console.log(err);\n              this.setState({pinataConnection : false});\n          });\n          \n          //this.reveal = setInterval(() => this.tick(), 0);\n        }\n      \n        componentWillUnmount() {\n          clearInterval(this.interval);\n        }\n\n        onImageChange = event => {\n          if (event.target.files && event.target.files[0]) {\n            let img = event.target.files[0];\n            console.log(\"IMG - \", img.name);\n            \n            this.setState({imageName : img.name})\n            \n            \n            console.log(\"File location \", './'+img.name)  //this.state.setFile) \n            this.setState({setFile : event.target.files[0]})\n\n            this.setState({\n              image: URL.createObjectURL(img)\n            });\n            //console.log(\"image - \", this.state.image);\n          }\n                     \n       };\n\n       async PinFile(){\n        // initialize the form data\n        console.log(\"Pinning\");\n        const formData = new FormData()\n  \n        // append the file form data to \n        formData.append(\"file\", this.state.setFile)\n  \n        //TAG call the keys from .env\n        const API_KEY = '0f3f630bec73946940bd';\n        const API_SECRET = 'c59ada21cf8e2eac1d19b2eb7177ff6d5d95f4c6a2b962a6d74959c3a7b132e9';\n        \n        // the endpoint needed to upload the file\n        const url =  `https://api.pinata.cloud/pinning/pinFileToIPFS`\n  \n        const response = await axios.post(\n          url,\n          formData,\n          {\n              maxContentLength: \"Infinity\",\n              headers: {\n                  \"Content-Type\": `multipart/form-data;boundary=${formData._boundary}`, \n                  'pinata_api_key': API_KEY,\n                  'pinata_secret_api_key': API_SECRET\n              }\n          })\n          console.log(response.data.IpfsHash)\n          // get the hash\n          this.setState({ipfsHash: response.data.IpfsHash})\n\n          if (this.state.ipfsHash != \"NONE\")\n            {\n            let tokenUri = {\n              \"name\" : this.input.value.toString(),//this.state.nftName,\n              \"description\" : \"NFT minted with SIBM contracts\",\n              \"image\" : \"https://ipfs.io/ipfs/\"+this.state.ipfsHash+\"/\"+this.state.imageName,\n              \"attributes\" : [\n                {\n                  \"trait_type\" : \"Rank\",\n                  \"value\" : this.state.nftCount,\n                }\n              ]\n            }\n            console.log(tokenUri);\n            const urlJs =  `https://api.pinata.cloud/pinning/pinJSONToIPFS`\n\n            const response = await axios.post(\n              urlJs,\n              tokenUri,\n              {\n                  headers: {\n                      'pinata_api_key': API_KEY,\n                      'pinata_secret_api_key': API_SECRET\n                  }\n              })\n              console.log(\"JSON hash :: \", response.data.IpfsHash)\n              // get the hash\n              this.setState({ipfsJSONHash: response.data.IpfsHash})\n            }\n      }\n    \n        render() {\n          return (\n            <form className=\"mb-0\" onSubmit={(event) => {\n                event.preventDefault()                \n                this.PinFile();\n                \n                }}>\n\n            <div style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\"\n              }}>\n              \n              <Switch\n                checked={this.state.mint_market}\n                onChange={checked => {this.setState({mint_market : !this.state.mint_market})}}\n                offColor=\"yellow\"\n              />\n              \n             </div>\n\n             <div style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n              }}>\n              {\n              this.state.mint_market\n              ?\n              <b>NFT Minting</b> :\n              <b>NFT MarketPlace Coming Soon</b>\n              }\n                </div>\n                <div style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\"\n                  }}>\n                <h1> <font color={(!this.state.pinataConnection) ? \"red\" :\"green\"}>{this.state.pinataConnection} </font></h1> \n                 </div>\n            <div style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n              }}>\n            <img height=\"250\" width=\"250\" src={this.state.image} />\n            </div>\n\n            <div style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n              }}>\n            <input type=\"file\" name=\"myImage\" onChange={this.onImageChange} />\n            </div>\n\n\n            <input\n            type=\"text\"\n            onChange={(event) => {\n              const nftName = this.input.value.toString()\n              this.setState({\n                nftName: nftName // * this.props.swapPairPrice\n              }) \n             // console.log('nftName :: ', this.state.nftName); \n            }}\n            ref={(input) => { this.input = input }}\n            className=\"form-control form-control-lg\"\n            placeholder=\"Give your NFT a Name\"\n            required />\n\n            <div style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n              }}>\n            <button onClick={this.handleFile}/*type=\"submit\"*/ name=\"btn\" className=\"btn btn-primary btn-block btn-lg\" style={{ maxWidth: '325px', justifyContent:'center'}}> Mint Your Image</button>\n            \n            </div>\n            </form>\n          );\n        }\n      }\n      \n      export default NFTForm;\n  "]},"metadata":{},"sourceType":"module"}