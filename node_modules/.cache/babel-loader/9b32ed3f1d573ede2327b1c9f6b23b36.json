{"ast":null,"code":"import _regeneratorRuntime from \"/Users/andrew/Documents/Work/SIBM-Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/andrew/Documents/Work/SIBM-Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/andrew/Documents/Work/SIBM-Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/andrew/Documents/Work/SIBM-Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/andrew/Documents/Work/SIBM-Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/andrew/Documents/Work/SIBM-Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/andrew/Documents/Work/SIBM-Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/andrew/Documents/Work/SIBM-Test/src/components/NFTForm.js\";\nimport React, { Component } from 'react'; //import { useState } from 'react'\n\nimport './App.css';\nimport Switch from 'react-ios-switch';\nimport FormData from 'form-data'; //import sibmLogo from '../sIcon.ico'\n\nimport sibmLogo from '../sibm-logo.png';\nimport NFTCard from './NFTCard'; // ...\n//import {Card} from 'Card.js';\n//import { ColorExtractor } from 'react-color-extractor'\n//import { colors } from \"Colors.js\";\n//import { Card, Icon, Image } from 'semantic-ui-react';\n//import { Container, Header, List } from \"semantic-ui-react\";\n//import {ProductCard} from 'react-ui-cards';\n//import {Card} from 'react-ui-cards';\n//import {CryptoCard} from 'react-ui-cards';\n//import {NewsHeaderCard} from 'react-ui-cards';\n//import AwesomeButtonProgress from 'react-awesome-button/src/components/AwesomeButtonProgress';\n\nvar pinataSDK = require('@pinata/sdk'); //add .ENV file\n\n\nvar pinata = pinataSDK('0f3f630bec73946940bd', 'c59ada21cf8e2eac1d19b2eb7177ff6d5d95f4c6a2b962a6d74959c3a7b132e9');\n\nvar axios = require('axios');\n/*\nexport const NftCard = () => <ProductCard\nphotos={[\n    'https://i.imgur.com/jRVDeI8.jpg',\n    'https://i.imgur.com/raPe27t.jpg'\n]}\nprice='$99'\nproductName='JPG'\ndescription='NFT for sale'\nbuttonText='Add to cart'\nurl=''\n/>\n*/\n//import Identicon from 'identicon.js';\n//var QRCode = require('qrcode.react');\n// <img src = {this.state.nftImageUri[this.state.nftIdx]} onClick = {this.updateNft}  width = {150} height = {150}/>    \n\n\nvar NFTForm = /*#__PURE__*/function (_Component) {\n  _inherits(NFTForm, _Component);\n\n  function NFTForm(props) {\n    var _this;\n\n    _classCallCheck(this, NFTForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NFTForm).call(this, props));\n\n    _this.onImageChange = function (event) {\n      if (event.target.files && event.target.files[0]) {\n        var img = event.target.files[0];\n        console.log(\"IMG - \", img.name);\n\n        _this.setState({\n          imageName: img.name\n        });\n\n        console.log(\"File location \", './' + img.name); //this.state.setFile) \n\n        _this.setState({\n          setFile: event.target.files[0]\n        });\n\n        _this.setState({\n          image: URL.createObjectURL(img)\n        }); //console.log(\"image - \", this.state.image);\n\n      }\n    };\n\n    _this.state = {\n      account: \"\",\n      seconds: 0,\n      imgBuffer: \"\",\n      revealImg: false,\n      revealImg2: false,\n      image: sibmLogo,\n      imageName: null,\n      mint_market: false,\n      //IPFS\n      ipfsByteCount: \"0\",\n      pinataConnection: false,\n      nftCount: \"\",\n      setFile: \"\",\n      nftName: \"\",\n      ipfsHash: \"NONE\",\n      ipfsJSONHash: \"\",\n      tokenUri: \"\",\n      //nft contract       \n      nftMintAddress: \"0x96C742592c5b55C17c86B6a996c91C8A812BB91C\",\n      //\"0x760e90639425f52c0295987BfB99046E4CFD72C3\",    //\"0x8A422D1Ea395721423eF544aC95c316e9CbF37f8\",\n      nftMintAbi: [{\n        \"inputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"constructor\"\n      }, {\n        \"anonymous\": false,\n        \"inputs\": [{\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }, {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"approved\",\n          \"type\": \"address\"\n        }, {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }],\n        \"name\": \"Approval\",\n        \"type\": \"event\"\n      }, {\n        \"anonymous\": false,\n        \"inputs\": [{\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }, {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }, {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }],\n        \"name\": \"ApprovalForAll\",\n        \"type\": \"event\"\n      }, {\n        \"anonymous\": false,\n        \"inputs\": [{\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        }, {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        }, {\n          \"indexed\": true,\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }],\n        \"name\": \"Transfer\",\n        \"type\": \"event\"\n      }, {\n        \"inputs\": [],\n        \"name\": \"Nft_Id\",\n        \"outputs\": [{\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n      }, {\n        \"inputs\": [],\n        \"name\": \"admin\",\n        \"outputs\": [{\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n      }, {\n        \"inputs\": [{\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        }, {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }],\n        \"name\": \"approve\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n      }, {\n        \"inputs\": [{\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }],\n        \"name\": \"balanceOf\",\n        \"outputs\": [{\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n      }, {\n        \"inputs\": [{\n          \"internalType\": \"string\",\n          \"name\": \"tokenUri\",\n          \"type\": \"string\"\n        }],\n        \"name\": \"createNft\",\n        \"outputs\": [{\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n      }, {\n        \"inputs\": [{\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }],\n        \"name\": \"getApproved\",\n        \"outputs\": [{\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n      }, {\n        \"inputs\": [{\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }, {\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }],\n        \"name\": \"isApprovedForAll\",\n        \"outputs\": [{\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n      }, {\n        \"inputs\": [],\n        \"name\": \"name\",\n        \"outputs\": [{\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n      }, {\n        \"inputs\": [{\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }],\n        \"name\": \"ownerOf\",\n        \"outputs\": [{\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n      }, {\n        \"inputs\": [{\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        }, {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        }, {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }],\n        \"name\": \"safeTransferFrom\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n      }, {\n        \"inputs\": [{\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        }, {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        }, {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }, {\n          \"internalType\": \"bytes\",\n          \"name\": \"_data\",\n          \"type\": \"bytes\"\n        }],\n        \"name\": \"safeTransferFrom\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n      }, {\n        \"inputs\": [{\n          \"internalType\": \"address\",\n          \"name\": \"operator\",\n          \"type\": \"address\"\n        }, {\n          \"internalType\": \"bool\",\n          \"name\": \"approved\",\n          \"type\": \"bool\"\n        }],\n        \"name\": \"setApprovalForAll\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n      }, {\n        \"inputs\": [{\n          \"internalType\": \"bytes4\",\n          \"name\": \"interfaceId\",\n          \"type\": \"bytes4\"\n        }],\n        \"name\": \"supportsInterface\",\n        \"outputs\": [{\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n      }, {\n        \"inputs\": [],\n        \"name\": \"symbol\",\n        \"outputs\": [{\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n      }, {\n        \"inputs\": [{\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }],\n        \"name\": \"tokenURI\",\n        \"outputs\": [{\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n      }, {\n        \"inputs\": [{\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        }, {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        }, {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenId\",\n          \"type\": \"uint256\"\n        }],\n        \"name\": \"transferFrom\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n      }],\n\n      /*[\n        {\n          \"inputs\": [],\n          \"stateMutability\": \"nonpayable\",\n          \"type\": \"constructor\"\n        },\n        {\n          \"anonymous\": false,\n          \"inputs\": [\n            {\n              \"indexed\": true,\n              \"internalType\": \"address\",\n              \"name\": \"_to\",\n              \"type\": \"address\"\n            },\n            {\n              \"indexed\": true,\n              \"internalType\": \"uint256\",\n              \"name\": \"_tokenId\",\n              \"type\": \"uint256\"\n            },\n            {\n              \"indexed\": false,\n              \"internalType\": \"string\",\n              \"name\": \"_ipfsHash\",\n              \"type\": \"string\"\n            }\n          ],\n          \"name\": \"Mint\",\n          \"type\": \"event\"\n        },\n        {\n          \"anonymous\": false,\n          \"inputs\": [\n            {\n              \"indexed\": true,\n              \"internalType\": \"address\",\n              \"name\": \"_from\",\n              \"type\": \"address\"\n            },\n            {\n              \"indexed\": true,\n              \"internalType\": \"address\",\n              \"name\": \"_to\",\n              \"type\": \"address\"\n            },\n            {\n              \"indexed\": true,\n              \"internalType\": \"uint256\",\n              \"name\": \"_tokenId\",\n              \"type\": \"uint256\"\n            }\n          ],\n          \"name\": \"Transfer\",\n          \"type\": \"event\"\n        },\n        {\n          \"inputs\": [\n            {\n              \"internalType\": \"address\",\n              \"name\": \"\",\n              \"type\": \"address\"\n            }\n          ],\n          \"name\": \"OwnerToHash\",\n          \"outputs\": [\n            {\n              \"internalType\": \"string\",\n              \"name\": \"\",\n              \"type\": \"string\"\n            }\n          ],\n          \"stateMutability\": \"view\",\n          \"type\": \"function\"\n        },\n        {\n          \"inputs\": [\n            {\n              \"internalType\": \"string\",\n              \"name\": \"_ipfsHash\",\n              \"type\": \"string\"\n            }\n          ],\n          \"name\": \"mint\",\n          \"outputs\": [],\n          \"stateMutability\": \"payable\",\n          \"type\": \"function\"\n        },\n        {\n          \"inputs\": [],\n          \"name\": \"name\",\n          \"outputs\": [\n            {\n              \"internalType\": \"string\",\n              \"name\": \"\",\n              \"type\": \"string\"\n            }\n          ],\n          \"stateMutability\": \"view\",\n          \"type\": \"function\"\n        },\n        {\n          \"inputs\": [],\n          \"name\": \"nftCounter\",\n          \"outputs\": [\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"\",\n              \"type\": \"uint256\"\n            }\n          ],\n          \"stateMutability\": \"view\",\n          \"type\": \"function\"\n        },\n        {\n          \"inputs\": [\n            {\n              \"internalType\": \"address\",\n              \"name\": \"_to\",\n              \"type\": \"address\"\n            },\n            {\n              \"internalType\": \"uint256\",\n              \"name\": \"_tokenId\",\n              \"type\": \"uint256\"\n            }\n          ],\n          \"name\": \"transfer\",\n          \"outputs\": [],\n          \"stateMutability\": \"nonpayable\",\n          \"type\": \"function\"\n        }\n      ]*/\n      nftMintContract: \"\",\n      nftMintName: \"\",\n      Nft_Id: \"\",\n      nftImageUri: [],\n      nftIdx: 0,\n      Nfts_owned: 0\n    }; //this.loadMintContract = this.loadMintContract.bind(this);\n\n    return _this;\n  }\n\n  _createClass(NFTForm, [{\n    key: \"loadMintContract\",\n    value: function () {\n      var _loadMintContract = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var web3, bsChain, accounts, nftMintContract, nftMintName, Nft_Id, i, nftUri, _response, Nfts_owned, API_KEY, API_SECRET, url, response;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                web3 = window.web3;\n                bsChain = web3.eth;\n                _context.next = 4;\n                return bsChain.getAccounts();\n\n              case 4:\n                accounts = _context.sent;\n                //console.log(\"accounts :: \", accounts[0]);\n                this.setState({\n                  account: accounts[0]\n                });\n                this.state.nftMintAddress = web3.utils.toChecksumAddress(this.state.nftMintAddress);\n                nftMintContract = new bsChain.Contract(this.state.nftMintAbi, this.state.nftMintAddress);\n                this.setState({\n                  nftMintContract: nftMintContract\n                });\n                _context.next = 11;\n                return nftMintContract.methods.name().call();\n\n              case 11:\n                nftMintName = _context.sent;\n                this.setState({\n                  nftMintName: nftMintName\n                });\n                console.log(\"nftMintName :: \", nftMintName);\n                _context.next = 16;\n                return nftMintContract.methods.Nft_Id().call();\n\n              case 16:\n                Nft_Id = _context.sent;\n                Nft_Id = Nft_Id.toString() - 1;\n                console.log(\"Nft_Id :: \", Nft_Id);\n                this.setState({\n                  Nft_Id: Nft_Id\n                });\n                i = 0;\n\n              case 21:\n                if (!(i <= Nft_Id)) {\n                  _context.next = 33;\n                  break;\n                }\n\n                _context.next = 24;\n                return nftMintContract.methods.tokenURI(i).call();\n\n              case 24:\n                nftUri = _context.sent;\n                _context.next = 27;\n                return axios.get(nftUri);\n\n              case 27:\n                _response = _context.sent;\n                console.log(\" response :: \", _response.data.image);\n                this.state.nftImageUri.push(_response.data.image); //this.setState({nftImageUri[i] : response.data.image}) \n\n              case 30:\n                i++;\n                _context.next = 21;\n                break;\n\n              case 33:\n                console.log(this.state.nftImageUri);\n\n                if (!this.state.account) {\n                  _context.next = 40;\n                  break;\n                }\n\n                _context.next = 37;\n                return nftMintContract.methods.balanceOf(this.state.account).call();\n\n              case 37:\n                Nfts_owned = _context.sent;\n                this.setState({\n                  Nfts_owned: Nfts_owned\n                });\n                console.log(\"Nft_account :: \", Nfts_owned);\n\n              case 40:\n                //TAG call the keys from .env\n                API_KEY = '0f3f630bec73946940bd';\n                API_SECRET = 'c59ada21cf8e2eac1d19b2eb7177ff6d5d95f4c6a2b962a6d74959c3a7b132e9'; // the endpoint needed to upload the file\n\n                url = \"https://api.pinata.cloud/data/userPinnedDataTotal\";\n                _context.next = 45;\n                return axios.get(url, {\n                  headers: {\n                    'pinata_api_key': API_KEY,\n                    'pinata_secret_api_key': API_SECRET\n                  }\n                });\n\n              case 45:\n                response = _context.sent;\n                console.log(\" response :: \", response.data.pin_size_total / 1000); // get the hash\n\n                this.setState({\n                  ipfsByteCount: response.data.pin_size_total / 1000\n                });\n\n              case 48:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function loadMintContract() {\n        return _loadMintContract.apply(this, arguments);\n      }\n\n      return loadMintContract;\n    }()\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.loadMintContract();\n      pinata.testAuthentication().then(function (result) {\n        //handle successful authentication here\n        console.log(result);\n\n        _this2.setState({\n          pinataConnection: true\n        });\n      }).catch(function (err) {\n        //handle error here\n        console.log(err);\n\n        _this2.setState({\n          pinataConnection: false\n        });\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.interval);\n    }\n  }, {\n    key: \"updateNft\",\n    value: function () {\n      var _updateNft = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.state.nftIdx > this.state.Nfts_owned) {\n                  this.setState({\n                    nftIdx: 0\n                  });\n                } else this.setState({\n                  nftIdx: this.state.nftIdx + 1\n                });\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function updateNft() {\n        return _updateNft.apply(this, arguments);\n      }\n\n      return updateNft;\n    }()\n  }, {\n    key: \"PinFilethenMint\",\n    value: function () {\n      var _PinFilethenMint = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var formData, API_KEY, API_SECRET, url, response, tokenUri, urlJs, _response2, item_Id, result;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                // initialize the form data\n                console.log(\"Pinning\");\n                formData = new FormData(); // append the file form data to \n\n                formData.append(\"file\", this.state.setFile); //TAG call the keys from .env\n\n                API_KEY = '0f3f630bec73946940bd';\n                API_SECRET = 'c59ada21cf8e2eac1d19b2eb7177ff6d5d95f4c6a2b962a6d74959c3a7b132e9'; // the endpoint needed to upload the file\n\n                url = \"https://api.pinata.cloud/pinning/pinFileToIPFS\";\n                _context3.next = 8;\n                return axios.post(url, formData, {\n                  maxContentLength: \"Infinity\",\n                  headers: {\n                    \"Content-Type\": \"multipart/form-data;boundary=\".concat(formData._boundary),\n                    'pinata_api_key': API_KEY,\n                    'pinata_secret_api_key': API_SECRET\n                  }\n                });\n\n              case 8:\n                response = _context3.sent;\n                console.log(response.data.IpfsHash); // get the hash link\n\n                this.setState({\n                  ipfsHash: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash + \"/?preview=1\"\n                });\n                console.log(\"ipfsHash ::\", this.state.ipfsHash);\n\n                if (!(this.state.ipfsHash != \"NONE\")) {\n                  _context3.next = 25;\n                  break;\n                }\n\n                tokenUri = {\n                  \"name\": this.input.value.toString(),\n                  //this.state.nftName,\n                  \"description\": \"NFT minted with SIBM contracts\",\n                  \"image\": this.state.ipfsHash\n                };\n                console.log(tokenUri);\n                urlJs = \"https://api.pinata.cloud/pinning/pinJSONToIPFS\";\n                _context3.next = 18;\n                return axios.post(urlJs, tokenUri, {\n                  headers: {\n                    'pinata_api_key': API_KEY,\n                    'pinata_secret_api_key': API_SECRET\n                  }\n                });\n\n              case 18:\n                _response2 = _context3.sent;\n                this.setState({\n                  ipfsJSONHash: \"https://gateway.pinata.cloud/ipfs/\" + _response2.data.IpfsHash\n                });\n                console.log(\"ipfsJSONHash :: \", this.state.ipfsJSONHash);\n                _context3.next = 23;\n                return this.state.nftMintContract.methods.createNft(this.state.ipfsJSONHash).send({\n                  from: this.state.account\n                });\n\n              case 23:\n                item_Id = _context3.sent;\n                result = window.confirm(\"IMPORTANT used for viewing in metamask! NFT Token ID : \", item_Id.toString());\n\n              case 25:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function PinFilethenMint() {\n        return _PinFilethenMint.apply(this, arguments);\n      }\n\n      return PinFilethenMint;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var content;\n\n      if (this.state.mint_market) {\n        content = /*#__PURE__*/React.createElement(\"form\", {\n          className: \"mb-0\",\n          onSubmit: function onSubmit(event) {\n            event.preventDefault();\n\n            _this3.PinFilethenMint();\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 761,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"table\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 766,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"thead\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 767,\n            columnNumber: 14\n          }\n        }, /*#__PURE__*/React.createElement(\"tr\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 768,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(\"th\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 769,\n            columnNumber: 17\n          }\n        }, \"NFT's Minted   \"), /*#__PURE__*/React.createElement(\"th\", {\n          width: \"20\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 770,\n            columnNumber: 17\n          }\n        }, \"NFT's Remaining\"), /*#__PURE__*/React.createElement(\"th\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 771,\n            columnNumber: 17\n          }\n        }, \"Avg. NFT Size (KB)\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 774,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"tr\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 775,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 776,\n            columnNumber: 15\n          }\n        }, this.state.Nft_Id, \" \"), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 777,\n            columnNumber: 15\n          }\n        }, \" \", parseFloat((1000000 - this.state.ipfsByteCount) / (this.state.ipfsByteCount / this.state.Nft_Id)).toFixed(0), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 778,\n            columnNumber: 15\n          }\n        }, \" \", this.state.ipfsByteCount / this.state.Nft_Id, \" \")))), /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 783,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(\"h1\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 788,\n            columnNumber: 15\n          }\n        }, \" \", /*#__PURE__*/React.createElement(\"font\", {\n          color: !this.state.pinataConnection ? \"red\" : \"green\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 788,\n            columnNumber: 20\n          }\n        }, this.state.pinataConnection, \" \"))), /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 790,\n            columnNumber: 16\n          }\n        }, this.state.ipfsByteCount, \"KB / 1.0 GB\"), /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 797,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          height: \"300\",\n          width: \"300\",\n          src: this.state.image,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 802,\n            columnNumber: 11\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 805,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"input\", {\n          type: \"file\",\n          name: \"myImage\",\n          onChange: this.onImageChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 810,\n            columnNumber: 11\n          }\n        })), /*#__PURE__*/React.createElement(\"input\", {\n          type: \"text\",\n          onChange: function onChange(event) {\n            var nftName = _this3.input.value.toString();\n\n            _this3.setState({\n              nftName: nftName // * this.props.swapPairPrice\n\n            }); // console.log('nftName :: ', this.state.nftName); \n\n          },\n          ref: function ref(input) {\n            _this3.input = input;\n          },\n          className: \"form-control form-control-lg\",\n          placeholder: \"Give your NFT a Name\",\n          required: true,\n          style: {\n            maxWidth: '650px',\n            justifyContent: 'center'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 814,\n            columnNumber: 11\n          }\n        }), /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 830,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"button\", {\n          onClick: this.handleFile\n          /*type=\"submit\"*/\n          ,\n          name: \"btn\",\n          className: \"btn btn-primary btn-block btn-lg\",\n          style: {\n            maxWidth: '650px',\n            justifyContent: 'center'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 835,\n            columnNumber: 11\n          }\n        }, \" Mint Your Image\")));\n      } else {\n        content = /*#__PURE__*/React.createElement(\"form\", {\n          className: \"mb-6\",\n          onSubmit: function onSubmit(event) {\n            event.preventDefault(); //make offer / buy\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 843,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 847,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"container\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 852,\n            columnNumber: 15\n          }\n        }, this.state.nftImageUri.map(function (count) {\n          console.log(\"count :: \", count);\n          return /*#__PURE__*/React.createElement(NFTCard, {\n            nftImageUri: count,\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 856,\n              columnNumber: 26\n            }\n          });\n        }))));\n      } //<div className=\"card-body\">\n\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"mb-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 864,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 865,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Switch, {\n        checked: this.state.mint_market,\n        onChange: function onChange(checked) {\n          _this3.setState({\n            mint_market: !_this3.state.mint_market\n          });\n        },\n        offColor: \"blue\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 866,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 872,\n          columnNumber: 13\n        }\n      }, this.state.mint_market ? /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 880,\n          columnNumber: 13\n        }\n      }, this.state.nftMintName) : /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 881,\n          columnNumber: 13\n        }\n      }, \"NFT MarketPlace Coming Soon\")), content);\n    }\n  }]);\n\n  return NFTForm;\n}(Component);\n\nexport default NFTForm;","map":{"version":3,"sources":["/Users/andrew/Documents/Work/SIBM-Test/src/components/NFTForm.js"],"names":["React","Component","Switch","FormData","sibmLogo","NFTCard","pinataSDK","require","pinata","axios","NFTForm","props","onImageChange","event","target","files","img","console","log","name","setState","imageName","setFile","image","URL","createObjectURL","state","account","seconds","imgBuffer","revealImg","revealImg2","mint_market","ipfsByteCount","pinataConnection","nftCount","nftName","ipfsHash","ipfsJSONHash","tokenUri","nftMintAddress","nftMintAbi","nftMintContract","nftMintName","Nft_Id","nftImageUri","nftIdx","Nfts_owned","web3","window","bsChain","eth","getAccounts","accounts","utils","toChecksumAddress","Contract","methods","call","toString","i","tokenURI","nftUri","get","response","data","push","balanceOf","API_KEY","API_SECRET","url","headers","pin_size_total","loadMintContract","testAuthentication","then","result","catch","err","clearInterval","interval","formData","append","post","maxContentLength","_boundary","IpfsHash","input","value","urlJs","createNft","send","from","item_Id","confirm","content","preventDefault","PinFilethenMint","parseFloat","toFixed","display","justifyContent","alignItems","maxWidth","handleFile","map","count","checked"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n//import { useState } from 'react'\nimport './App.css';\nimport Switch from 'react-ios-switch';\nimport FormData from 'form-data';\n//import sibmLogo from '../sIcon.ico'\nimport sibmLogo from '../sibm-logo.png';\n\nimport NFTCard from './NFTCard'\n\n// ...\n\n//import {Card} from 'Card.js';\n//import { ColorExtractor } from 'react-color-extractor'\n//import { colors } from \"Colors.js\";\n//import { Card, Icon, Image } from 'semantic-ui-react';\n//import { Container, Header, List } from \"semantic-ui-react\";\n\n//import {ProductCard} from 'react-ui-cards';\n//import {Card} from 'react-ui-cards';\n//import {CryptoCard} from 'react-ui-cards';\n//import {NewsHeaderCard} from 'react-ui-cards';\n\n//import AwesomeButtonProgress from 'react-awesome-button/src/components/AwesomeButtonProgress';\n\nconst pinataSDK = require('@pinata/sdk');\n//add .ENV file\nconst pinata = pinataSDK('0f3f630bec73946940bd', 'c59ada21cf8e2eac1d19b2eb7177ff6d5d95f4c6a2b962a6d74959c3a7b132e9');\nconst axios = require('axios');\n\n\n/*\nexport const NftCard = () => <ProductCard\nphotos={[\n    'https://i.imgur.com/jRVDeI8.jpg',\n    'https://i.imgur.com/raPe27t.jpg'\n]}\nprice='$99'\nproductName='JPG'\ndescription='NFT for sale'\nbuttonText='Add to cart'\nurl=''\n/>\n*/\n//import Identicon from 'identicon.js';\n//var QRCode = require('qrcode.react');\n\n// <img src = {this.state.nftImageUri[this.state.nftIdx]} onClick = {this.updateNft}  width = {150} height = {150}/>    \n\nclass NFTForm extends Component {\n\n        constructor(props) {\n          super(props);\n          this.state = { \n            account : \"\",\n            seconds : 0,\n            imgBuffer : \"\",\n            revealImg: false,\n            revealImg2: false,\n            image: sibmLogo,\n            imageName: null,\n            mint_market : false,\n            //IPFS\n            ipfsByteCount : \"0\",\n            pinataConnection : false,\n            nftCount : \"\",\n            setFile : \"\",\n            nftName : \"\",\n            ipfsHash : \"NONE\",\n            ipfsJSONHash : \"\",\n            tokenUri : \"\",\n            //nft contract       \n            nftMintAddress : \"0x96C742592c5b55C17c86B6a996c91C8A812BB91C\", //\"0x760e90639425f52c0295987BfB99046E4CFD72C3\",    //\"0x8A422D1Ea395721423eF544aC95c316e9CbF37f8\",\n            nftMintAbi : [\n              {\n                \"inputs\": [],\n                \"stateMutability\": \"nonpayable\",\n                \"type\": \"constructor\"\n              },\n              {\n                \"anonymous\": false,\n                \"inputs\": [\n                  {\n                    \"indexed\": true,\n                    \"internalType\": \"address\",\n                    \"name\": \"owner\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"indexed\": true,\n                    \"internalType\": \"address\",\n                    \"name\": \"approved\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"indexed\": true,\n                    \"internalType\": \"uint256\",\n                    \"name\": \"tokenId\",\n                    \"type\": \"uint256\"\n                  }\n                ],\n                \"name\": \"Approval\",\n                \"type\": \"event\"\n              },\n              {\n                \"anonymous\": false,\n                \"inputs\": [\n                  {\n                    \"indexed\": true,\n                    \"internalType\": \"address\",\n                    \"name\": \"owner\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"indexed\": true,\n                    \"internalType\": \"address\",\n                    \"name\": \"operator\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"indexed\": false,\n                    \"internalType\": \"bool\",\n                    \"name\": \"approved\",\n                    \"type\": \"bool\"\n                  }\n                ],\n                \"name\": \"ApprovalForAll\",\n                \"type\": \"event\"\n              },\n              {\n                \"anonymous\": false,\n                \"inputs\": [\n                  {\n                    \"indexed\": true,\n                    \"internalType\": \"address\",\n                    \"name\": \"from\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"indexed\": true,\n                    \"internalType\": \"address\",\n                    \"name\": \"to\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"indexed\": true,\n                    \"internalType\": \"uint256\",\n                    \"name\": \"tokenId\",\n                    \"type\": \"uint256\"\n                  }\n                ],\n                \"name\": \"Transfer\",\n                \"type\": \"event\"\n              },\n              {\n                \"inputs\": [],\n                \"name\": \"Nft_Id\",\n                \"outputs\": [\n                  {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"\",\n                    \"type\": \"uint256\"\n                  }\n                ],\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [],\n                \"name\": \"admin\",\n                \"outputs\": [\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"\",\n                    \"type\": \"address\"\n                  }\n                ],\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"to\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"tokenId\",\n                    \"type\": \"uint256\"\n                  }\n                ],\n                \"name\": \"approve\",\n                \"outputs\": [],\n                \"stateMutability\": \"nonpayable\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"owner\",\n                    \"type\": \"address\"\n                  }\n                ],\n                \"name\": \"balanceOf\",\n                \"outputs\": [\n                  {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"\",\n                    \"type\": \"uint256\"\n                  }\n                ],\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [\n                  {\n                    \"internalType\": \"string\",\n                    \"name\": \"tokenUri\",\n                    \"type\": \"string\"\n                  }\n                ],\n                \"name\": \"createNft\",\n                \"outputs\": [\n                  {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"\",\n                    \"type\": \"uint256\"\n                  }\n                ],\n                \"stateMutability\": \"nonpayable\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [\n                  {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"tokenId\",\n                    \"type\": \"uint256\"\n                  }\n                ],\n                \"name\": \"getApproved\",\n                \"outputs\": [\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"\",\n                    \"type\": \"address\"\n                  }\n                ],\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"owner\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"operator\",\n                    \"type\": \"address\"\n                  }\n                ],\n                \"name\": \"isApprovedForAll\",\n                \"outputs\": [\n                  {\n                    \"internalType\": \"bool\",\n                    \"name\": \"\",\n                    \"type\": \"bool\"\n                  }\n                ],\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [],\n                \"name\": \"name\",\n                \"outputs\": [\n                  {\n                    \"internalType\": \"string\",\n                    \"name\": \"\",\n                    \"type\": \"string\"\n                  }\n                ],\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [\n                  {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"tokenId\",\n                    \"type\": \"uint256\"\n                  }\n                ],\n                \"name\": \"ownerOf\",\n                \"outputs\": [\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"\",\n                    \"type\": \"address\"\n                  }\n                ],\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"from\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"to\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"tokenId\",\n                    \"type\": \"uint256\"\n                  }\n                ],\n                \"name\": \"safeTransferFrom\",\n                \"outputs\": [],\n                \"stateMutability\": \"nonpayable\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"from\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"to\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"tokenId\",\n                    \"type\": \"uint256\"\n                  },\n                  {\n                    \"internalType\": \"bytes\",\n                    \"name\": \"_data\",\n                    \"type\": \"bytes\"\n                  }\n                ],\n                \"name\": \"safeTransferFrom\",\n                \"outputs\": [],\n                \"stateMutability\": \"nonpayable\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"operator\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"internalType\": \"bool\",\n                    \"name\": \"approved\",\n                    \"type\": \"bool\"\n                  }\n                ],\n                \"name\": \"setApprovalForAll\",\n                \"outputs\": [],\n                \"stateMutability\": \"nonpayable\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [\n                  {\n                    \"internalType\": \"bytes4\",\n                    \"name\": \"interfaceId\",\n                    \"type\": \"bytes4\"\n                  }\n                ],\n                \"name\": \"supportsInterface\",\n                \"outputs\": [\n                  {\n                    \"internalType\": \"bool\",\n                    \"name\": \"\",\n                    \"type\": \"bool\"\n                  }\n                ],\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [],\n                \"name\": \"symbol\",\n                \"outputs\": [\n                  {\n                    \"internalType\": \"string\",\n                    \"name\": \"\",\n                    \"type\": \"string\"\n                  }\n                ],\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [\n                  {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"tokenId\",\n                    \"type\": \"uint256\"\n                  }\n                ],\n                \"name\": \"tokenURI\",\n                \"outputs\": [\n                  {\n                    \"internalType\": \"string\",\n                    \"name\": \"\",\n                    \"type\": \"string\"\n                  }\n                ],\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"from\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"to\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"tokenId\",\n                    \"type\": \"uint256\"\n                  }\n                ],\n                \"name\": \"transferFrom\",\n                \"outputs\": [],\n                \"stateMutability\": \"nonpayable\",\n                \"type\": \"function\"\n              }\n            ],\n            /*[\n              {\n                \"inputs\": [],\n                \"stateMutability\": \"nonpayable\",\n                \"type\": \"constructor\"\n              },\n              {\n                \"anonymous\": false,\n                \"inputs\": [\n                  {\n                    \"indexed\": true,\n                    \"internalType\": \"address\",\n                    \"name\": \"_to\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"indexed\": true,\n                    \"internalType\": \"uint256\",\n                    \"name\": \"_tokenId\",\n                    \"type\": \"uint256\"\n                  },\n                  {\n                    \"indexed\": false,\n                    \"internalType\": \"string\",\n                    \"name\": \"_ipfsHash\",\n                    \"type\": \"string\"\n                  }\n                ],\n                \"name\": \"Mint\",\n                \"type\": \"event\"\n              },\n              {\n                \"anonymous\": false,\n                \"inputs\": [\n                  {\n                    \"indexed\": true,\n                    \"internalType\": \"address\",\n                    \"name\": \"_from\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"indexed\": true,\n                    \"internalType\": \"address\",\n                    \"name\": \"_to\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"indexed\": true,\n                    \"internalType\": \"uint256\",\n                    \"name\": \"_tokenId\",\n                    \"type\": \"uint256\"\n                  }\n                ],\n                \"name\": \"Transfer\",\n                \"type\": \"event\"\n              },\n              {\n                \"inputs\": [\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"\",\n                    \"type\": \"address\"\n                  }\n                ],\n                \"name\": \"OwnerToHash\",\n                \"outputs\": [\n                  {\n                    \"internalType\": \"string\",\n                    \"name\": \"\",\n                    \"type\": \"string\"\n                  }\n                ],\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [\n                  {\n                    \"internalType\": \"string\",\n                    \"name\": \"_ipfsHash\",\n                    \"type\": \"string\"\n                  }\n                ],\n                \"name\": \"mint\",\n                \"outputs\": [],\n                \"stateMutability\": \"payable\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [],\n                \"name\": \"name\",\n                \"outputs\": [\n                  {\n                    \"internalType\": \"string\",\n                    \"name\": \"\",\n                    \"type\": \"string\"\n                  }\n                ],\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [],\n                \"name\": \"nftCounter\",\n                \"outputs\": [\n                  {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"\",\n                    \"type\": \"uint256\"\n                  }\n                ],\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n              },\n              {\n                \"inputs\": [\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"_to\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"_tokenId\",\n                    \"type\": \"uint256\"\n                  }\n                ],\n                \"name\": \"transfer\",\n                \"outputs\": [],\n                \"stateMutability\": \"nonpayable\",\n                \"type\": \"function\"\n              }\n            ]*/\n            nftMintContract : \"\",\n            nftMintName : \"\",\n            Nft_Id : \"\",\n            nftImageUri : [],\n            nftIdx : 0,\n            Nfts_owned : 0\n          };\n          //this.loadMintContract = this.loadMintContract.bind(this);\n          \n        }\n\n        async loadMintContract()\n            {\n            const web3 = window.web3\n            const bsChain = web3.eth\n\n            const accounts = await bsChain.getAccounts()\n            //console.log(\"accounts :: \", accounts[0]);\n            this.setState({account : accounts[0]});\n\n            this.state.nftMintAddress = web3.utils.toChecksumAddress(this.state.nftMintAddress);\n            const nftMintContract = new bsChain.Contract(this.state.nftMintAbi, this.state.nftMintAddress);\n            this.setState({nftMintContract});\n            \n            let nftMintName = await nftMintContract.methods.name().call();\n            this.setState({nftMintName}); \n            console.log(\"nftMintName :: \",nftMintName);\n\n            let Nft_Id = await nftMintContract.methods.Nft_Id().call();\n            Nft_Id = Nft_Id.toString() - 1;\n            console.log(\"Nft_Id :: \",Nft_Id);\n            this.setState({Nft_Id}); \n\n            for (let i = 0; i <= Nft_Id; i++)\n              {\n              let nftUri = await nftMintContract.methods.tokenURI(i).call();\n              const response = await axios.get(nftUri)\n              console.log( \" response :: \",response.data.image)\n              this.state.nftImageUri.push(response.data.image)\n              //this.setState({nftImageUri[i] : response.data.image}) \n              }\n              console.log(this.state.nftImageUri);\n            if (this.state.account)\n              {\n              let Nfts_owned = await nftMintContract.methods.balanceOf(this.state.account).call();\n              this.setState({Nfts_owned : Nfts_owned})\n              console.log(\"Nft_account :: \", Nfts_owned);\n              }\n            //TAG call the keys from .env\n            const API_KEY = '0f3f630bec73946940bd';\n            const API_SECRET = 'c59ada21cf8e2eac1d19b2eb7177ff6d5d95f4c6a2b962a6d74959c3a7b132e9';\n            \n            // the endpoint needed to upload the file\n            const url =  `https://api.pinata.cloud/data/userPinnedDataTotal`\n      \n            const response = await axios.get(\n              url,\n              {\n                headers: {\n                    'pinata_api_key': API_KEY,\n                    'pinata_secret_api_key': API_SECRET\n                }\n              }\n              )\n            console.log( \" response :: \",response.data.pin_size_total / 1000)\n          // get the hash\n          this.setState({ipfsByteCount : response.data.pin_size_total / 1000})\n\n            }\n      \n        componentDidMount() {\n          this.loadMintContract(); \n\n          pinata.testAuthentication().then((result) => {\n            //handle successful authentication here\n              console.log(result);\n              this.setState({pinataConnection : true});\n            }).catch((err) => {\n              //handle error here\n              console.log(err);\n              this.setState({pinataConnection : false});\n          });\n        }\n      \n        componentWillUnmount() {\n          clearInterval(this.interval);\n        }\n\n        onImageChange = event => {\n          if (event.target.files && event.target.files[0]) {\n            let img = event.target.files[0];\n            console.log(\"IMG - \", img.name);  \n            this.setState({imageName : img.name})\n            console.log(\"File location \", './'+img.name)  //this.state.setFile) \n            this.setState({setFile : event.target.files[0]})\n\n            this.setState({\n              image: URL.createObjectURL(img)\n            });\n            //console.log(\"image - \", this.state.image);\n          }\n                     \n       };\n\n       async updateNft(){\n         if (this.state.nftIdx > this.state.Nfts_owned) \n            {\n            this.setState({nftIdx : 0}) \n            }\n          else this.setState({nftIdx : this.state.nftIdx + 1})\n       }\n\n       async PinFilethenMint(){\n        // initialize the form data\n        console.log(\"Pinning\");\n        const formData = new FormData()\n        // append the file form data to \n        formData.append(\"file\", this.state.setFile)\n        //TAG call the keys from .env\n        const API_KEY = '0f3f630bec73946940bd';\n        const API_SECRET = 'c59ada21cf8e2eac1d19b2eb7177ff6d5d95f4c6a2b962a6d74959c3a7b132e9';\n        // the endpoint needed to upload the file\n        const url =  `https://api.pinata.cloud/pinning/pinFileToIPFS`\n  \n        const response = await axios.post(\n          url,\n          formData,\n          {\n              maxContentLength: \"Infinity\",\n              headers: {\n                  \"Content-Type\": `multipart/form-data;boundary=${formData._boundary}`, \n                  'pinata_api_key': API_KEY,\n                  'pinata_secret_api_key': API_SECRET\n              }\n          })\n          console.log(response.data.IpfsHash)\n          // get the hash link\n          this.setState({ipfsHash: \"https://gateway.pinata.cloud/ipfs/\"+response.data.IpfsHash+\"/?preview=1\"});\n          console.log(\"ipfsHash ::\", this.state.ipfsHash);\n          \n          if (this.state.ipfsHash != \"NONE\")\n            {\n            let tokenUri = {\n              \"name\" : this.input.value.toString(),//this.state.nftName,\n              \"description\" : \"NFT minted with SIBM contracts\",\n              \"image\" : this.state.ipfsHash\n            }\n            console.log(tokenUri);\n            \n            const urlJs =  `https://api.pinata.cloud/pinning/pinJSONToIPFS`\n\n            const response = await axios.post(\n              urlJs,\n              tokenUri,\n              {\n                  headers: {\n                      'pinata_api_key': API_KEY,\n                      'pinata_secret_api_key': API_SECRET\n                  }\n              })\n              this.setState({ipfsJSONHash: \"https://gateway.pinata.cloud/ipfs/\"+response.data.IpfsHash})\n              console.log(\"ipfsJSONHash :: \", this.state.ipfsJSONHash)\n              let item_Id = await this.state.nftMintContract.methods.createNft(this.state.ipfsJSONHash).send({from :this.state.account});\n              let result = window.confirm(\"IMPORTANT used for viewing in metamask! NFT Token ID : \", item_Id.toString());\n            }\n      }\n    \n        render() {\n          let content\n          if (this.state.mint_market) \n          {\n            content =\n            <form className=\"mb-0\" onSubmit={(event) => {\n              event.preventDefault()                \n              this.PinFilethenMint();\n              \n              }}>\n            <table>\n             <thead>\n              <tr>\n                <th>NFT's Minted   </th>\n                <th  width=\"20\" >NFT's Remaining</th>\n                <th>Avg. NFT Size (KB)</th>\n              </tr>\n             </thead>\n            <tbody>\n            <tr>\n              <td>{this.state.Nft_Id} </td>\n              <td> {parseFloat((1000000 - this.state.ipfsByteCount) / (this.state.ipfsByteCount / this.state.Nft_Id)).toFixed(0)} </td>\n              <td> {this.state.ipfsByteCount / this.state.Nft_Id} </td>\n              </tr>\n            </tbody>\n            </table>\n\n              <div style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\"\n                }}>\n              <h1> <font color={(!this.state.pinataConnection) ? \"red\" :\"green\"}>{this.state.pinataConnection} </font></h1> \n               </div>\n               <div style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\"\n                  }}>\n              { this.state.ipfsByteCount}KB / 1.0 GB   \n               </div>\n          <div style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n            }}>\n          <img height=\"300\" width=\"300\" src={this.state.image} />\n          </div>\n\n          <div style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n            }}>\n          <input type=\"file\" name=\"myImage\" onChange={this.onImageChange} />\n          </div>\n\n\n          <input\n          type=\"text\"\n          onChange={(event) => {\n            const nftName = this.input.value.toString()\n            this.setState({\n              nftName: nftName // * this.props.swapPairPrice\n            }) \n           // console.log('nftName :: ', this.state.nftName); \n          }}\n          ref={(input) => { this.input = input }}\n          className=\"form-control form-control-lg\"\n          placeholder=\"Give your NFT a Name\"\n          required\n          style={{ maxWidth: '650px', justifyContent:'center'}}\n           />\n\n          <div style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n            }}>\n          <button onClick={this.handleFile}/*type=\"submit\"*/ name=\"btn\" className=\"btn btn-primary btn-block btn-lg\" style={{ maxWidth: '650px', justifyContent:'center'}}> Mint Your Image</button>\n          \n          </div>\n          </form>\n          }\n          else \n            {\n            content =\n            <form className=\"mb-6\" onSubmit={(event) => {\n            event.preventDefault()                \n            //make offer / buy\n            }}>      \n            <div style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n            }}>\n              <div className='container'>\n                {\n                this.state.nftImageUri.map(count => {\n                  console.log(\"count :: \",count);\n                  return <NFTCard nftImageUri = {count} />\n                })}\n              </div>\n              </div>\n          </form>\n          }\n//<div className=\"card-body\">\n          return (\n            <div className=\"mb-3\" >\n            <div style={{display: \"flex\",justifyContent: \"center\",alignItems: \"center\"}}>\n            <Switch\n              checked={this.state.mint_market}\n              onChange={checked => {this.setState({mint_market : !this.state.mint_market})}}\n              offColor=\"blue\"\n            />\n            </div>\n            <div style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n            }}>\n            {\n            this.state.mint_market\n            ?\n            <b>{this.state.nftMintName}</b> :\n            <b>NFT MarketPlace Coming Soon</b>\n            }\n              </div>\n              {content}\n            </div>\n            \n          );\n        }\n      }\n      \n      export default NFTForm;\n  "]},"metadata":{},"sourceType":"module"}