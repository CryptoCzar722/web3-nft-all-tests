{"ast":null,"code":"import _regeneratorRuntime from \"/Users/andrew/Documents/Work/SIBM-Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/andrew/Documents/Work/SIBM-Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/andrew/Documents/Work/SIBM-Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/andrew/Documents/Work/SIBM-Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/andrew/Documents/Work/SIBM-Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/andrew/Documents/Work/SIBM-Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/andrew/Documents/Work/SIBM-Test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/andrew/Documents/Work/SIBM-Test/src/components/DashboardForm.js\";\nimport React, { Component } from 'react'; //import { useTable } from 'react-table';\n//import { PieChart } from 'react-minimal-pie-chart';\n\nimport Chart from \"react-apexcharts\";\n/*import {CryptoCard} from 'react-ui-cards';\nexport const Crypto = () => <CryptoCard\n    currencyName='Smart Insurance'\n    currencyPrice='0.0000001'\n    icon = {sibmLogo}\n    currencyShortName='SIBM'\n    trend = \"10\"\n    trendDirection={-1}\n    chartColor='blue'\n    chartData={[0,1,2,3,1,3,4]}\n/>*/\n\nvar DashboardForm = /*#__PURE__*/function (_Component) {\n  _inherits(DashboardForm, _Component);\n\n  function DashboardForm(props) {\n    var _this;\n\n    _classCallCheck(this, DashboardForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DashboardForm).call(this, props)); //this.onSubmit = this.onSubmit.bind(this)\n\n    _this.statePie = {\n      options: {},\n      series: [_this.props.bnbBalance * _this.props.PancakeArbPrice, _this.props.ethBalance * _this.props.PancakeEthArbPrice, _this.props.btcbBalance * _this.props.PancakeBtcbArbPrice, _this.props.busdBalance * 0, _this.props.daiBalance * 0, _this.props.afswBalance * 0.00000001],\n      //labels: ['BNB', 'WETH', 'BTCB', 'BUSD', 'DAI', 'AFSW'],\n      dataLabels: ['BNB', 'WETH', 'BTCB', 'BUSD', 'DAI', 'AFSW']\n    };\n    _this.localTime = 0;\n    _this.state = {\n      time: \"\",\n      tickCounter: 8,\n      options: {\n        chart: {\n          id: \"realtime\",\n          type: 'line',\n          animations: {\n            enabled: true,\n            easing: 'linear',\n            dynamicAnimation: {\n              speed: 1\n            }\n          },\n          toolbar: {\n            show: false\n          }\n        },\n        yaxis: {\n          tickAmount: 6,\n          max: _this.props.ethBalance * _this.props.ethPrice * 1.03,\n          min: _this.props.ethBalance * _this.props.ethPrice * 0.97\n        },\n        xaxis: {\n          //type: 'category',\n          //tickAmount: 8,\n          //range : 15,\n          //overwriteCategories: true,\n          categories: [0, 0, 0, 0, 0, 0, 0, 0]\n        }\n      },\n      series: [{\n        name: \"series-1\",\n        data: [_this.props.ethBalance * _this.props.ethPrice, 0, 0, 0, 0, 0, 0, 0]\n      }],\n      newSeries: [{\n        name: \"series-1\",\n        data: [_this.props.ethBalance * _this.props.ethPrice, 0, 0, 0, 0, 0, 0, 0]\n      }],\n      newOptions: {\n        chart: {\n          id: \"realtime\",\n          type: 'line',\n          animations: {\n            enabled: true,\n            easing: 'linear',\n            dynamicAnimation: {\n              speed: 1\n            }\n          },\n          toolbar: {\n            show: false\n          }\n        },\n        yaxis: {\n          max: _this.props.ethBalance * _this.props.ethPrice * 1.05,\n          min: _this.props.ethBalance * _this.props.ethPrice * 0.95\n        },\n        xaxis: {\n          //type: 'category',\n          //tickAmount: 8,\n          //range : 15,\n          //overwriteCategories: true,\n          categories: [1, 1, 1, 1, 1, 1, 1, 1]\n        }\n      }\n    };\n    _this.state2 = {\n      options: {\n        series: [{\n          data: [_this.props.ethBalance * _this.props.ethPrice * 1.2, _this.props.ethBalance * _this.props.ethPrice * 1.16, _this.props.ethBalance * _this.props.ethPrice * 1.13, _this.props.ethBalance * _this.props.ethPrice * 1.17, _this.props.ethBalance * _this.props.ethPrice * 1.03, _this.props.ethBalance * _this.props.ethPrice * 0.95, _this.props.ethBalance * _this.props.ethPrice * 1.1, _this.props.ethBalance * _this.props.ethPrice]\n        }],\n        chart: {\n          id: 'realtime',\n          height: 350,\n          type: 'line',\n          animations: {\n            enabled: true,\n            easing: 'linear',\n            dynamicAnimation: {\n              speed: 1000\n            }\n          }\n        },\n        stroke: {\n          curve: 'smooth'\n        },\n        title: {\n          text: 'Dynamic Updating Chart',\n          align: 'left'\n        },\n        markers: {\n          size: 0\n        },\n        xaxis: {\n          type: 'datetime',\n          range: 10\n        },\n        yaxis: {\n          max: _this.props.ethBalance * _this.props.ethPrice * 1.05,\n          min: _this.props.ethBalance * _this.props.ethPrice * 0.95\n        }\n      }\n    };\n    return _this;\n  }\n\n  _createClass(DashboardForm, [{\n    key: \"tick\",\n    value: function () {\n      var _tick = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var d2, dateTime2;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                //const newSeries = [];\n\n                /*this.state.series.map((s) => {\n                  const data = s.data.map(() => {\n                    return this.props.ethBalance * this.props.ethPrice;  //this.props.ethBalance * \n                  })\n                  s.data\n                  newSeries.push({data})\n                })*/\n\n                /*\n                const d = new Date();\n                let dateTime = d.toLocaleTimeString(); //getSeconds()\n                //console.log(this.state.newOptions.xaxis.categories.length, \" new array length\");\n                //console.log(this.state.options.xaxis.categories.length, \" old array length\");\n                //console.log(\"type \", typeof(this.state.options.xaxis.categories))\n                //console.log(this.state.options.xaxis.categories.length)\n                /////////////////////////////////////////\n                //Updates graph live time when state is updateed\n                if (this.state.tickCounter > 0)\n                {\n                  this.state.newSeries[0].data.length = 8\n                  this.state.newSeries[0].data[this.state.newSeries[0].data.length - 8] = this.state.newSeries[0].data[this.state.newSeries[0].data.length - 7]; \n                  this.state.newSeries[0].data[this.state.newSeries[0].data.length - 7] = this.state.newSeries[0].data[this.state.newSeries[0].data.length - 6]; \n                  this.state.newSeries[0].data[this.state.newSeries[0].data.length - 6] = this.state.newSeries[0].data[this.state.newSeries[0].data.length - 5];\n                  this.state.newSeries[0].data[this.state.newSeries[0].data.length - 5] = this.state.newSeries[0].data[this.state.newSeries[0].data.length - 4];\n                  this.state.newSeries[0].data[this.state.newSeries[0].data.length - 4] = this.state.newSeries[0].data[this.state.newSeries[0].data.length - 3];\n                  this.state.newSeries[0].data[this.state.newSeries[0].data.length - 3] = this.state.newSeries[0].data[this.state.newSeries[0].data.length - 2];\n                  this.state.newSeries[0].data[this.state.newSeries[0].data.length - 2] = this.state.newSeries[0].data[this.state.newSeries[0].data.length - 1];\n                  this.state.newSeries[0].data[this.state.newSeries[0].data.length  - 1 ] = this.props.ethBalance * this.props.ethPrice; \n                  \n                  //console.log(this.state.tickCounter,\"before add - \",this.state.newOptions.xaxis.categories);\n                this.state.newOptions.xaxis.categories.length = 8\n                this.state.newOptions.xaxis.categories[this.state.newOptions.xaxis.categories.length - 8] = this.state.newOptions.xaxis.categories[this.state.newOptions.xaxis.categories.length - 7]; \n                this.state.newOptions.xaxis.categories[this.state.newOptions.xaxis.categories.length - 7] = this.state.newOptions.xaxis.categories[this.state.newOptions.xaxis.categories.length - 6]; \n                this.state.newOptions.xaxis.categories[this.state.newOptions.xaxis.categories.length - 6] = this.state.newOptions.xaxis.categories[this.state.newOptions.xaxis.categories.length - 5];\n                this.state.newOptions.xaxis.categories[this.state.newOptions.xaxis.categories.length - 5] = this.state.newOptions.xaxis.categories[this.state.newOptions.xaxis.categories.length - 4];\n                this.state.newOptions.xaxis.categories[this.state.newOptions.xaxis.categories.length - 4] = this.state.newOptions.xaxis.categories[this.state.newOptions.xaxis.categories.length - 3];\n                this.state.newOptions.xaxis.categories[this.state.newOptions.xaxis.categories.length - 3] = this.state.newOptions.xaxis.categories[this.state.newOptions.xaxis.categories.length - 2];\n                this.state.newOptions.xaxis.categories[this.state.newOptions.xaxis.categories.length - 2] = this.state.newOptions.xaxis.categories[this.state.newOptions.xaxis.categories.length - 1];\n                this.state.newOptions.xaxis.categories[this.state.newOptions.xaxis.categories.length  - 1 ] = dateTime; \n                \n                //console.log(\" 0 after add - \",this.state.newOptions.xaxis.categories[6]);  \n                //console.log(\"lg \",this.state.series[0].data)\n                this.setState({options : {xaxis : {categories : this.state.newOptions.xaxis.categories}}})\n                //this.setState({\n                //  series: {categories : this.state.newCategories}\n                //}) \n                this.state.tickCounter--\n                //console.log(\" 1 after add - \",this.state.newOptions.xaxis.categories);\n                //console.log(\" 1 after add - \",newOptions.xaxis.categories);\n                  \n                }\n                else \n                  {\n                  this.setState({tickCounter : 8})\n                  }\n                \n                  this.setState({\n                    series: this.state.newSeries\n                    })\n                */\n                d2 = new Date();\n                dateTime2 = d2.toLocaleTimeString();\n                this.setState({\n                  time: dateTime2\n                });\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function tick() {\n        return _tick.apply(this, arguments);\n      }\n\n      return tick;\n    }()\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.interval = setInterval(function () {\n        return _this2.tick();\n      }, 1000);\n      /*\n      live chart - hard to keep historical data could query from bscscan block later\n      <div id = \"Chart\" className=\"mixed-chart\">\n          <Chart\n              options={this.state.options}\n              series={this.state.series}\n              type=\"line\"\n              width=\"550\"\n            />\n            </div>\n             <tr>\n                <td>DOGE </td>\n                <td> {parseFloat(this.props.dogeBalance).toFixed(4)}</td>\n                <td> ${parseFloat(this.props.PancakeDogeArbPrice * this.props.dogeBalance).toFixed(2)}</td>\n                <td> <font color={\"green\"}>${parseFloat(this.props.PancakeDogeArbPrice).toFixed(2)} </font></td>\n              </tr> \n      */\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.interval);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return /*#__PURE__*/React.createElement(\"form\", {\n        className: \"md\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 9\n        }\n      }, \"BNB Balance : $\", parseFloat(this.props.bnbBalance * this.props.PancakeArbPrice).toFixed(5), \" @ \", this.state.time), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Chart, {\n        options: this.statePie.options,\n        series: this.statePie.series,\n        type: \"donut\",\n        width: \"280\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 9\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 9\n        }\n      }, \"\\xA0\\xA0\\xA0 \"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-group mb-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        value: this.state.toAddress,\n        ref: function ref(input2) {\n          _this3.input2 = input2;\n        },\n        onChange: function onChange(event) {\n          //web3.eth.getBalance(this.state.address)\n          var etherAddress = _this3.input2.value.toString();\n\n          _this3.setState({\n            toAddress: etherAddress\n          });\n        } //styles = {input2}\n        //ref={(input) => { this.input = input }}\n        ,\n        className: \"form-control form-control-lg\",\n        placeholder: \"Add Token By Contract\",\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary btn-block btn-sm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }\n      }, \"Add Asset\")), /*#__PURE__*/React.createElement(\"table\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"thead\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 16\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 19\n        }\n      }, \"Token\"), /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 19\n        }\n      }, \"Amount\"), /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 19\n        }\n      }, \"Value\"), /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 19\n        }\n      }, \"Price\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 15\n        }\n      }, \"BNB \"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 15\n        }\n      }, \" \", parseFloat(this.props.bnbBalance).toFixed(4)), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 15\n        }\n      }, \"  $\", parseFloat(this.props.PancakeArbPrice * this.props.bnbBalance).toFixed(2), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 15\n        }\n      }, \"  \", /*#__PURE__*/React.createElement(\"font\", {\n        color: this.props.BiswapArbPrice < this.props.PancakeArbPrice ? \"red\" : \"green\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 21\n        }\n      }, \"$\", parseFloat(this.props.PancakeArbPrice).toFixed(2), \" \"))), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 15\n        }\n      }, \"ETH \"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 15\n        }\n      }, \" \", parseFloat(this.props.ethBalance).toFixed(4)), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 15\n        }\n      }, \" $\", parseFloat(this.props.PancakeEthArbPrice * this.props.ethBalance).toFixed(2)), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 15\n        }\n      }, \"  \", /*#__PURE__*/React.createElement(\"font\", {\n        color: this.props.BiswapEthArbPrice < this.props.PancakeEthArbPrice ? \"red\" : \"green\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 21\n        }\n      }, \"$\", parseFloat(this.props.PancakeEthArbPrice).toFixed(2), \" \"))), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 15\n        }\n      }, \"BTCB \"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 15\n        }\n      }, \" \", parseFloat(this.props.btcbBalance).toFixed(4)), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 15\n        }\n      }, \" $\", parseFloat(this.props.PancakeBtcbArbPrice * this.props.btcbBalance).toFixed(2)), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 15\n        }\n      }, \"  \", /*#__PURE__*/React.createElement(\"font\", {\n        color: this.props.BiswapBtcbArbPrice < this.props.PancakeBtcbArbPrice ? \"red\" : \"green\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 21\n        }\n      }, \"$\", parseFloat(this.props.PancakeBtcbArbPrice).toFixed(2), \" \"))), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 15\n        }\n      }, \"ADA \"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 15\n        }\n      }, \" \", parseFloat(this.props.adaBalance).toFixed(4)), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 15\n        }\n      }, \" $\", parseFloat(this.props.PancakeAdaArbPrice * this.props.adaBalance).toFixed(2)), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 15\n        }\n      }, \" \", /*#__PURE__*/React.createElement(\"font\", {\n        color: \"green\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 20\n        }\n      }, \"$\", parseFloat(this.props.PancakeAdaArbPrice).toFixed(2), \" \"))), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 15\n        }\n      }, \"LTC \"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 15\n        }\n      }, \" \", parseFloat(this.props.ltcBalance).toFixed(4)), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 15\n        }\n      }, \"$\", parseFloat(this.props.PancakeLtcArbPrice * this.props.ltcBalance).toFixed(2)), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 15\n        }\n      }, \" \", /*#__PURE__*/React.createElement(\"font\", {\n        color: \"green\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 20\n        }\n      }, \"$\", parseFloat(this.props.PancakeLtcArbPrice).toFixed(2), \" \"))), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 15\n        }\n      }, \"DAI \"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 15\n        }\n      }, \" \", parseFloat(this.props.daiBalance).toFixed(4)), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 15\n        }\n      }, \" 1.00 \"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 15\n        }\n      }, \" 1.00 \")), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 15\n        }\n      }, \"BUSD \"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 15\n        }\n      }, \" \", parseFloat(this.props.busdBalance).toFixed(4)), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 15\n        }\n      }, \" 1.00 \"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 15\n        }\n      }, \" 1.00 \")), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 15\n        }\n      }, \"DOGE \"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 15\n        }\n      }, \" Coming Soon \"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 15\n        }\n      }, \" I/P \"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 15\n        }\n      }, \" I/P \")), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 15\n        }\n      }, \"AVAX \"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 15\n        }\n      }, \" Coming Soon \"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 15\n        }\n      }, \" I/P \"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 15\n        }\n      }, \" I/P \")), /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 15\n        }\n      }, \"AFSW \"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 15\n        }\n      }, \" \", parseFloat(this.props.afswBalance).toFixed(4)), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 15\n        }\n      }, \"  \", /*#__PURE__*/React.createElement(\"font\", {\n        color: \"red\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 21\n        }\n      }, \"$\", parseFloat(0.0000001 * this.props.afswBalance).toFixed(2))), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 15\n        }\n      }, \"  \", /*#__PURE__*/React.createElement(\"font\", {\n        color: \"red\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 21\n        }\n      }, \"Coming Soon \"))))));\n    }\n  }]);\n\n  return DashboardForm;\n}(Component);\n\nexport default DashboardForm;\n/*\n<PieChart\n            text = \"Portfolio\"\n            data={[\n              { title: 'BTC', value: 5, color: '#E38627' },\n              { title: 'ETH', value: 80, color: '#C13C37' },\n              { title: 'DAI', value: 15, color: '#6A2135' },\n            ]}\n            radius = {25}\n          />\n        <tbody>\n        <table>\n        <tr>\n          <th>Exchange</th>\n          <th>Type</th>\n          <th>Pairs</th>\n          <th>Value</th>\n          <th>Fees</th>\n          <th>Date</th>\n        </tr>\n        <tr>\n          <td>Sushiswap</td>\n          <td>Limit</td>\n          <td>WBTC/DAI</td>\n          <td>1050.56</td>\n          <td>0.50</td>\n          <td>10/2/2021</td>\n        </tr>\n        <tr>\n          <td>Uniswap</td>\n          <td>Arbitrage</td>\n          <td>DAI/ETH</td>\n          <td>357.56</td>\n          <td>0.24</td>\n          <td>10/1/2021</td>\n        </tr>\n      </table>\n      </tbody>\n\n\nthis.state.options.map((x) => {\n        const xaxis = x.xaxis.map(() => {\n          //const cat = x.xaxis.categories.map(() =>{\n          return dateTime;  //this.props.ethBalance * \n        //})\n        })\n        newOptions.push({xaxis})\n      })*/\n//newSeries.push({ categories: date })\n//newSeries.push({ categories: date })\n\n/* this.state.options.map((s) => {\n  const xaxis = s.axis.map((s) => {\n    s.name = date;\n    return date;\n  })\n  newSeries.push({ xaxis, categories: date })\n})*/","map":{"version":3,"sources":["/Users/andrew/Documents/Work/SIBM-Test/src/components/DashboardForm.js"],"names":["React","Component","Chart","DashboardForm","props","statePie","options","series","bnbBalance","PancakeArbPrice","ethBalance","PancakeEthArbPrice","btcbBalance","PancakeBtcbArbPrice","busdBalance","daiBalance","afswBalance","dataLabels","localTime","state","time","tickCounter","chart","id","type","animations","enabled","easing","dynamicAnimation","speed","toolbar","show","yaxis","tickAmount","max","ethPrice","min","xaxis","categories","name","data","newSeries","newOptions","state2","height","stroke","curve","title","text","align","markers","size","range","d2","Date","dateTime2","toLocaleTimeString","setState","interval","setInterval","tick","clearInterval","parseFloat","toFixed","display","justifyContent","alignItems","toAddress","input2","event","etherAddress","value","toString","BiswapArbPrice","BiswapEthArbPrice","BiswapBtcbArbPrice","adaBalance","PancakeAdaArbPrice","ltcBalance","PancakeLtcArbPrice"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n//import { useTable } from 'react-table';\n//import { PieChart } from 'react-minimal-pie-chart';\nimport Chart from \"react-apexcharts\";\n/*import {CryptoCard} from 'react-ui-cards';\nexport const Crypto = () => <CryptoCard\n    currencyName='Smart Insurance'\n    currencyPrice='0.0000001'\n    icon = {sibmLogo}\n    currencyShortName='SIBM'\n    trend = \"10\"\n    trendDirection={-1}\n    chartColor='blue'\n    chartData={[0,1,2,3,1,3,4]}\n/>*/\n\nclass DashboardForm extends Component {\n  constructor(props) {\n    super(props)\n    //this.onSubmit = this.onSubmit.bind(this)\n    this.statePie = {\n      options: {},\n        series: [this.props.bnbBalance * this.props.PancakeArbPrice,this.props.ethBalance * this.props.PancakeEthArbPrice, this.props.btcbBalance * this.props.PancakeBtcbArbPrice, this.props.busdBalance * 0, this.props.daiBalance * 0, this.props.afswBalance * 0.00000001],\n        //labels: ['BNB', 'WETH', 'BTCB', 'BUSD', 'DAI', 'AFSW'],\n        dataLabels : ['BNB', 'WETH', 'BTCB', 'BUSD', 'DAI', 'AFSW'] \n    }\n    \n    this.localTime = 0\n\n    this.state = {\n      time : \"\",\n      tickCounter : 8,\n      options: {\n        chart: {\n          id: \"realtime\",\n          type: 'line',\n          animations: {\n            enabled: true,\n            easing: 'linear',\n            dynamicAnimation: {\n            speed: 1\n                  }\n            },\n          toolbar: {\n            show: false\n          },\n        },\n        yaxis: {\n          tickAmount: 6,\n          max : this.props.ethBalance * this.props.ethPrice* 1.03,\n          min : this.props.ethBalance * this.props.ethPrice * 0.97,\n        },\n        xaxis: {\n          //type: 'category',\n          //tickAmount: 8,\n          //range : 15,\n          //overwriteCategories: true,\n          categories: [0,0,0,0,0,0,0,0]\n        }\n      },\n      series: [\n        {\n          name: \"series-1\",\n          data: [this.props.ethBalance * this.props.ethPrice, 0, 0, 0, 0, 0, 0, 0]\n        }\n      ],\n      newSeries: [\n        {\n          name: \"series-1\",\n          data: [this.props.ethBalance * this.props.ethPrice, 0, 0, 0,0,0, 0, 0]\n        }\n      ],\n      newOptions : {\n        chart: {\n          id: \"realtime\",\n          type: 'line',\n          animations: {\n            enabled: true,\n            easing: 'linear',\n            dynamicAnimation: {\n            speed: 1\n                  }\n            },\n          toolbar: {\n            show: false\n          },\n        },\n        yaxis: {\n          max : this.props.ethBalance * this.props.ethPrice* 1.05,\n          min : this.props.ethBalance * this.props.ethPrice * 0.95,\n        },\n        xaxis: {\n          //type: 'category',\n          //tickAmount: 8,\n          //range : 15,\n          //overwriteCategories: true,\n          categories: [1,1,1,1,1,1,1,1]\n        }\n      }\n    };\n\n  this.state2 = { \n    options :{\n          series: [{\n          data: [this.props.ethBalance * this.props.ethPrice*1.2, this.props.ethBalance * this.props.ethPrice*1.16, this.props.ethBalance * this.props.ethPrice*1.13, this.props.ethBalance * this.props.ethPrice*1.17, this.props.ethBalance * this.props.ethPrice*1.03, this.props.ethBalance * this.props.ethPrice*0.95, this.props.ethBalance * this.props.ethPrice*1.1,this.props.ethBalance * this.props.ethPrice]\n        }],\n          chart: {\n          id: 'realtime',\n          height: 350,\n          type: 'line',\n          animations: {\n            enabled: true,\n            easing: 'linear',\n            dynamicAnimation: {\n              speed: 1000\n            }\n          }\n        },\n        stroke: {\n          curve: 'smooth'\n        },\n        title: {\n          text: 'Dynamic Updating Chart',\n          align: 'left'\n        },\n        markers: {\n          size: 0\n        },\n        xaxis: {\n          type: 'datetime',\n          range: 10,\n        },\n        yaxis: {\n          max : this.props.ethBalance * this.props.ethPrice* 1.05,\n          min : this.props.ethBalance * this.props.ethPrice * 0.95,\n        }\n        }\n      };\n    }\n\n  async tick(){\n      //const newSeries = [];\n      /*this.state.series.map((s) => {\n        const data = s.data.map(() => {\n          return this.props.ethBalance * this.props.ethPrice;  //this.props.ethBalance * \n        })\n        s.data\n        newSeries.push({data})\n      })*/\n      \n      /*\n      const d = new Date();\n      let dateTime = d.toLocaleTimeString(); //getSeconds()\n      //console.log(this.state.newOptions.xaxis.categories.length, \" new array length\");\n      //console.log(this.state.options.xaxis.categories.length, \" old array length\");\n      //console.log(\"type \", typeof(this.state.options.xaxis.categories))\n      //console.log(this.state.options.xaxis.categories.length)\n      /////////////////////////////////////////\n      //Updates graph live time when state is updateed\n      if (this.state.tickCounter > 0)\n      {\n        this.state.newSeries[0].data.length = 8\n        this.state.newSeries[0].data[this.state.newSeries[0].data.length - 8] = this.state.newSeries[0].data[this.state.newSeries[0].data.length - 7]; \n        this.state.newSeries[0].data[this.state.newSeries[0].data.length - 7] = this.state.newSeries[0].data[this.state.newSeries[0].data.length - 6]; \n        this.state.newSeries[0].data[this.state.newSeries[0].data.length - 6] = this.state.newSeries[0].data[this.state.newSeries[0].data.length - 5];\n        this.state.newSeries[0].data[this.state.newSeries[0].data.length - 5] = this.state.newSeries[0].data[this.state.newSeries[0].data.length - 4];\n        this.state.newSeries[0].data[this.state.newSeries[0].data.length - 4] = this.state.newSeries[0].data[this.state.newSeries[0].data.length - 3];\n        this.state.newSeries[0].data[this.state.newSeries[0].data.length - 3] = this.state.newSeries[0].data[this.state.newSeries[0].data.length - 2];\n        this.state.newSeries[0].data[this.state.newSeries[0].data.length - 2] = this.state.newSeries[0].data[this.state.newSeries[0].data.length - 1];\n        this.state.newSeries[0].data[this.state.newSeries[0].data.length  - 1 ] = this.props.ethBalance * this.props.ethPrice; \n        \n        //console.log(this.state.tickCounter,\"before add - \",this.state.newOptions.xaxis.categories);\n      this.state.newOptions.xaxis.categories.length = 8\n      this.state.newOptions.xaxis.categories[this.state.newOptions.xaxis.categories.length - 8] = this.state.newOptions.xaxis.categories[this.state.newOptions.xaxis.categories.length - 7]; \n      this.state.newOptions.xaxis.categories[this.state.newOptions.xaxis.categories.length - 7] = this.state.newOptions.xaxis.categories[this.state.newOptions.xaxis.categories.length - 6]; \n      this.state.newOptions.xaxis.categories[this.state.newOptions.xaxis.categories.length - 6] = this.state.newOptions.xaxis.categories[this.state.newOptions.xaxis.categories.length - 5];\n      this.state.newOptions.xaxis.categories[this.state.newOptions.xaxis.categories.length - 5] = this.state.newOptions.xaxis.categories[this.state.newOptions.xaxis.categories.length - 4];\n      this.state.newOptions.xaxis.categories[this.state.newOptions.xaxis.categories.length - 4] = this.state.newOptions.xaxis.categories[this.state.newOptions.xaxis.categories.length - 3];\n      this.state.newOptions.xaxis.categories[this.state.newOptions.xaxis.categories.length - 3] = this.state.newOptions.xaxis.categories[this.state.newOptions.xaxis.categories.length - 2];\n      this.state.newOptions.xaxis.categories[this.state.newOptions.xaxis.categories.length - 2] = this.state.newOptions.xaxis.categories[this.state.newOptions.xaxis.categories.length - 1];\n      this.state.newOptions.xaxis.categories[this.state.newOptions.xaxis.categories.length  - 1 ] = dateTime; \n      \n      //console.log(\" 0 after add - \",this.state.newOptions.xaxis.categories[6]);  \n      //console.log(\"lg \",this.state.series[0].data)\n      this.setState({options : {xaxis : {categories : this.state.newOptions.xaxis.categories}}})\n      //this.setState({\n      //  series: {categories : this.state.newCategories}\n      //}) \n      this.state.tickCounter--\n      //console.log(\" 1 after add - \",this.state.newOptions.xaxis.categories);\n      //console.log(\" 1 after add - \",newOptions.xaxis.categories);\n        \n      }\n      else \n        {\n        this.setState({tickCounter : 8})\n        }\n      \n        this.setState({\n          series: this.state.newSeries\n          })\n      */\n\n      const d2 = new Date();\n      let dateTime2 = d2.toLocaleTimeString();\n      this.setState({\n        time: dateTime2\n      })\n      }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.tick(), 1000);\n    /*\n    live chart - hard to keep historical data could query from bscscan block later\n    <div id = \"Chart\" className=\"mixed-chart\">\n        <Chart\n            options={this.state.options}\n            series={this.state.series}\n            type=\"line\"\n            width=\"550\"\n          />\n          </div>\n\n          <tr>\n              <td>DOGE </td>\n              <td> {parseFloat(this.props.dogeBalance).toFixed(4)}</td>\n              <td> ${parseFloat(this.props.PancakeDogeArbPrice * this.props.dogeBalance).toFixed(2)}</td>\n              <td> <font color={\"green\"}>${parseFloat(this.props.PancakeDogeArbPrice).toFixed(2)} </font></td>\n            </tr> \n    */\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return (\n      <form className=\"md\">\n        <div>\n           BNB Balance : ${parseFloat(this.props.bnbBalance * this.props.PancakeArbPrice).toFixed(5)} @ {this.state.time}\n          </div>\n        <div style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n            }}>\n        <Chart options={this.statePie.options} series={this.statePie.series} type=\"donut\" width=\"280\" />\n        </div>\n        <div>&nbsp;&nbsp;&nbsp; </div>\n        <div className=\"input-group mb-4\">\n          <input\n            type= \"text\"\n            value = {this.state.toAddress}\n            ref={(input2) => { this.input2 = input2 }}\n            onChange={(event) => {\n              \n                //web3.eth.getBalance(this.state.address)\n                const etherAddress = this.input2.value.toString()\n                this.setState({\n                  toAddress: etherAddress\n                })\n              }}\n            //styles = {input2}\n            //ref={(input) => { this.input = input }}\n            className=\"form-control form-control-lg\"\n            placeholder=\"Add Token By Contract\"\n          required />\n          <button type=\"submit\" className=\"btn btn-primary btn-block btn-sm\">Add Asset</button>\n        </div>\n        <table>\n               <thead>\n                <tr>\n                  <th>Token</th>\n                  <th>Amount</th>\n                  <th>Value</th>\n                  <th>Price</th>\n                </tr>\n               </thead>\n            <tbody>\n            <tr>\n              <td>BNB </td>\n              <td> {parseFloat(this.props.bnbBalance).toFixed(4)}</td>\n              <td>  ${parseFloat(this.props.PancakeArbPrice * this.props.bnbBalance).toFixed(2)} </td>\n              <td>  <font color={(this.props.BiswapArbPrice < this.props.PancakeArbPrice) ? \"red\" :\"green\"}>${parseFloat(this.props.PancakeArbPrice).toFixed(2)} </font></td>\n            </tr>\n            <tr>\n              <td>ETH </td>\n              <td> {parseFloat(this.props.ethBalance).toFixed(4)}</td>\n              <td> ${parseFloat(this.props.PancakeEthArbPrice * this.props.ethBalance).toFixed(2)}</td>\n              <td>  <font color={(this.props.BiswapEthArbPrice < this.props.PancakeEthArbPrice) ? \"red\" :\"green\"}>${parseFloat(this.props.PancakeEthArbPrice).toFixed(2)} </font></td>\n            </tr>\n            <tr>  \n              <td>BTCB </td>\n              <td> {parseFloat(this.props.btcbBalance).toFixed(4)}</td>\n              <td> ${parseFloat(this.props.PancakeBtcbArbPrice * this.props.btcbBalance).toFixed(2)}</td>\n              <td>  <font color={(this.props.BiswapBtcbArbPrice < this.props.PancakeBtcbArbPrice) ? \"red\" :\"green\"}>${parseFloat(this.props.PancakeBtcbArbPrice).toFixed(2)} </font></td>\n            </tr>\n            <tr>\n              <td>ADA </td>\n              <td> {parseFloat(this.props.adaBalance).toFixed(4)}</td>\n              <td> ${parseFloat(this.props.PancakeAdaArbPrice * this.props.adaBalance).toFixed(2)}</td>\n              <td> <font color={\"green\"}>${parseFloat(this.props.PancakeAdaArbPrice).toFixed(2)} </font></td>\n            </tr> \n            <tr>\n              <td>LTC </td>\n              <td> {parseFloat(this.props.ltcBalance).toFixed(4)}</td>\n              <td>${parseFloat(this.props.PancakeLtcArbPrice * this.props.ltcBalance).toFixed(2)}</td>\n              <td> <font color={\"green\"}>${parseFloat(this.props.PancakeLtcArbPrice).toFixed(2)} </font></td>\n            </tr>  \n            <tr>\n              <td>DAI </td>\n              <td> {parseFloat(this.props.daiBalance).toFixed(4)}</td>\n              <td> 1.00 </td>\n              <td> 1.00 </td>\n            </tr> \n            <tr>  \n              <td>BUSD </td>\n              <td> {parseFloat(this.props.busdBalance).toFixed(4)}</td>\n              <td> 1.00 </td>\n              <td> 1.00 </td>\n            </tr>\n            <tr>\n              <td>DOGE </td>\n              <td> Coming Soon </td>\n              <td> I/P </td>\n              <td> I/P </td>\n            </tr> \n            <tr>\n              <td>AVAX </td>\n              <td> Coming Soon </td>\n              <td> I/P </td>\n              <td> I/P </td>\n            </tr>\n            <tr>\n              <td>AFSW </td>\n              <td> {parseFloat(this.props.afswBalance).toFixed(4)}</td>\n              <td>  <font color={\"red\"}>${parseFloat(0.0000001 * this.props.afswBalance).toFixed(2)}</font></td>\n              <td>  <font color={\"red\"}>Coming Soon </font></td>\n            </tr>  \n            </tbody>\n          </table> \n      </form>\n     \n    );\n  }\n}\n\nexport default DashboardForm;\n\n/*\n<PieChart\n            text = \"Portfolio\"\n            data={[\n              { title: 'BTC', value: 5, color: '#E38627' },\n              { title: 'ETH', value: 80, color: '#C13C37' },\n              { title: 'DAI', value: 15, color: '#6A2135' },\n            ]}\n            radius = {25}\n          />\n        <tbody>\n        <table>\n        <tr>\n          <th>Exchange</th>\n          <th>Type</th>\n          <th>Pairs</th>\n          <th>Value</th>\n          <th>Fees</th>\n          <th>Date</th>\n        </tr>\n        <tr>\n          <td>Sushiswap</td>\n          <td>Limit</td>\n          <td>WBTC/DAI</td>\n          <td>1050.56</td>\n          <td>0.50</td>\n          <td>10/2/2021</td>\n        </tr>\n        <tr>\n          <td>Uniswap</td>\n          <td>Arbitrage</td>\n          <td>DAI/ETH</td>\n          <td>357.56</td>\n          <td>0.24</td>\n          <td>10/1/2021</td>\n        </tr>\n      </table>\n      </tbody>\n\n\nthis.state.options.map((x) => {\n        const xaxis = x.xaxis.map(() => {\n          //const cat = x.xaxis.categories.map(() =>{\n          return dateTime;  //this.props.ethBalance * \n        //})\n        })\n        newOptions.push({xaxis})\n      })*/  \n        //newSeries.push({ categories: date })\n      \n      //newSeries.push({ categories: date })\n      /* this.state.options.map((s) => {\n        const xaxis = s.axis.map((s) => {\n          s.name = date;\n          return date;\n        })\n        newSeries.push({ xaxis, categories: date })\n      })*/\n\n\n      \n"]},"metadata":{},"sourceType":"module"}